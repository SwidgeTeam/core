{
  "address": "0x698ef266230cD82BeD2E1f4Fdf3d53382499D93E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_anyswapRouterAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_dexAddresses",
          "type": "address[]"
        },
        {
          "internalType": "enum Router.dexCode[]",
          "name": "_dexCodes",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dstCrossToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dstToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_crossAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toChainId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_dstDEX",
          "type": "uint8"
        }
      ],
      "name": "finalizeTokenCross",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_srcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_srcCrossToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dstCrossToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dstToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_srcAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toChainId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_bridge",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_srcDEX",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_dstDEX",
          "type": "uint8"
        }
      ],
      "name": "initTokensCross",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x80c70cd917ed4d38c117ddf6cca5b99037c68f0b5688306843bc679362d165e1",
  "receipt": {
    "to": null,
    "from": "0x335e2912D888F76326e806C666B690Df2D886D07",
    "contractAddress": "0x698ef266230cD82BeD2E1f4Fdf3d53382499D93E",
    "transactionIndex": 26,
    "gasUsed": "1456370",
    "logsBloom": "0x
    "blockHash": "0xd3afdb5b43750bd875c2f68da7f8709b858399e2f10b9814d8cc3415b14cdb0c",
    "transactionHash": "0x80c70cd917ed4d38c117ddf6cca5b99037c68f0b5688306843bc679362d165e1",
    "logs": [
      {
        "transactionIndex": 26,
        "blockNumber": 25632694,
        "transactionHash": "0x80c70cd917ed4d38c117ddf6cca5b99037c68f0b5688306843bc679362d165e1",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000335e2912d888f76326e806c666b690df2d886d07",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000cef66e94762000000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000c0229c94684b29285a90000000000000000000000000000000000000000000000000dd3c74cbe1c9e00000000000000000000000000000000000000000000000c0229d635eb9bd9e7a9",
        "logIndex": 83,
        "blockHash": "0xd3afdb5b43750bd875c2f68da7f8709b858399e2f10b9814d8cc3415b14cdb0c"
      }
    ],
    "blockNumber": 25632694,
    "cumulativeGasUsed": "5454123",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4f3aff3a747fcade12598081e80c6605a8be192f",
    [
      "0xE592427A0AEce92De3Edee1F18E0157C05861564"
    ],
    [
      0
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "e4c821527c123f23ae956e42b84b741a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_anyswapRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_dexAddresses\",\"type\":\"address[]\"},{\"internalType\":\"enum Router.dexCode[]\",\"name\":\"_dexCodes\",\"type\":\"uint8[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dstCrossToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_crossAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_dstDEX\",\"type\":\"uint8\"}],\"name\":\"finalizeTokenCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_srcCrossToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dstCrossToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_bridge\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_srcDEX\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_dstDEX\",\"type\":\"uint8\"}],\"name\":\"initTokensCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_anyswapRouterAddress\":\"Address of the default bridge\",\"_dexAddresses\":\"Array of DEX addresses\",\"_dexCodes\":\"Array of DEX identifiers\"}},\"finalizeTokenCross(address,address,address,uint256,uint256,uint8)\":{\"details\":\"This function is executed on the destination chain\"},\"initTokensCross(address,address,address,address,uint256,uint256,uint8,uint8,uint8)\":{\"details\":\"This function is executed on the origin chain\",\"params\":{\"_dstCrossToken\":\"Address of the token that will arrive to the destination chain\",\"_dstDEX\":\"Identifier of the exchange to use on the destination chain\",\"_dstToken\":\"Address of the token the user wants to receive on destination\",\"_srcAmount\":\"Amount of source tokens that user wants to move\",\"_srcCrossToken\":\"Address of the token we will swap on origin chain to send to the bridge\",\"_srcDEX\":\"Identifier of the exchange to use on the origin chain\",\"_srcToken\":\"Address of the token the user wants to swidge\",\"_toChainId\":\"Chain identifier that the user wants its token to receive\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"finalizeTokenCross(address,address,address,uint256,uint256,uint8)\":{\"notice\":\"Finalize the process of swidging\"},\"initTokensCross(address,address,address,address,uint256,uint256,uint8,uint8,uint8)\":{\"notice\":\"Init the process of swidging\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Router.sol\":\"Router\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Router.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"./dexs/IDEX.sol\\\";\\nimport \\\"./dexs/UniswapDEX.sol\\\";\\n\\ninterface AnyswapRouter {\\n    function anySwapOutUnderlying(address token, address to, uint amount, uint toChainID) external;\\n}\\n\\ncontract Router {\\n    AnyswapRouter private bridge;\\n    mapping(uint8 => IDEX) private swapProviders;\\n\\n    enum dexCode {\\n        Uniswap, // 0\\n        Sushiswap // 1\\n        // ...\\n    }\\n\\n    /// @param _anyswapRouterAddress Address of the default bridge\\n    /// @param _dexAddresses Array of DEX addresses\\n    /// @param _dexCodes Array of DEX identifiers\\n    constructor(address _anyswapRouterAddress, address[] memory _dexAddresses, dexCode[] memory _dexCodes) {\\n        initializeBridge(_anyswapRouterAddress);\\n        initializeDEXs(_dexAddresses, _dexCodes);\\n    }\\n\\n    /// Initialize bridge address\\n    /// @dev _anyswapRouterAddress Address of AnyswapRouter contract\\n    function initializeBridge(address _anyswapRouterAddress) internal {\\n        bridge = AnyswapRouter(_anyswapRouterAddress);\\n    }\\n\\n    /// Initialize the mapping of DEX's that router has available in its network\\n    /// @dev codes and addresses need to be same length, otherwise we fail\\n    /// @param _dexAddresses Array of DEX addresses\\n    /// @param _dexCodes Array of DEX identifiers\\n    function initializeDEXs(address[] memory _dexAddresses, dexCode[] memory _dexCodes) private {\\n        require(_dexAddresses.length == _dexCodes.length, \\\"Addresses count cannot mismatch codes count.\\\");\\n        require(_dexAddresses.length != 0, \\\"No swap providers informed.\\\");\\n        for (uint8 i = 0; i < _dexAddresses.length; i++) {\\n            IDEX provider = constructDEX(_dexAddresses[i], _dexCodes[i]);\\n            swapProviders[uint8(_dexCodes[i])] = provider;\\n        }\\n    }\\n\\n    /// Construct and return the concrete DEX object given its code and address\\n    /// @dev It returns an IDEX object so the router doesn't need to know the specifics\\n    /// @param _dexAddress The address of the DEX to be initialized\\n    /// @param _dexCode The code of the DEX we are initializing\\n    function constructDEX(address _dexAddress, dexCode _dexCode) private returns (IDEX){\\n        if (_dexCode == dexCode.Uniswap) {\\n            return new UniswapDEX(_dexAddress);\\n        }\\n        else {\\n            revert(\\\"Given `dexCode` implementation was not found.\\\");\\n        }\\n    }\\n\\n    /// Init the process of swidging\\n    /// @dev This function is executed on the origin chain\\n    /// @param _srcToken Address of the token the user wants to swidge\\n    /// @param _srcCrossToken Address of the token we will swap on origin chain to send to the bridge\\n    /// @param _dstCrossToken Address of the token that will arrive to the destination chain\\n    /// @param _dstToken Address of the token the user wants to receive on destination\\n    /// @param _srcAmount Amount of source tokens that user wants to move\\n    /// @param _toChainId Chain identifier that the user wants its token to receive\\n    /// @param _srcDEX Identifier of the exchange to use on the origin chain\\n    /// @param _dstDEX Identifier of the exchange to use on the destination chain\\n    function initTokensCross(\\n        address _srcToken,\\n        address _srcCrossToken,\\n        address _dstCrossToken,\\n        address _dstToken,\\n        uint256 _srcAmount,\\n        uint256 _toChainId,\\n        uint8 _bridge,\\n        uint8 _srcDEX,\\n        uint8 _dstDEX\\n    ) external {\\n        // Take ownership of tokens from user\\n        TransferHelper.safeTransferFrom(_srcToken, msg.sender, address(this), _srcAmount);\\n\\n        // Swap `srcToken` for a `dstCrossToken` that can go through the bridge into a native token\\n        IDEX swapProvider = swapProviders[_srcDEX];\\n        TransferHelper.safeApprove(_srcToken, swapProvider.custodianAddress(), _srcAmount);\\n        uint256 crossAmount = swapProvider.swap(_srcToken, _srcCrossToken, address(this), _srcAmount);\\n\\n        // Approve the bridge to take the tokens\\n        TransferHelper.safeApprove(_srcCrossToken, address(bridge), crossAmount);\\n\\n        // Call bridge to cross-chain\\n        // We tell the bridge to move the tokens to our address on the other side\\n        bridge.anySwapOutUnderlying(_srcCrossToken, address(this), crossAmount, _toChainId);\\n\\n        // Compute the calldata to be executed on the destination chain\\n        bytes memory data = abi.encodeWithSignature(\\n            \\\"finalizeTokenCross(address, address, address, uint256, uint256, unit8, unit8)\\\",\\n            _dstCrossToken,\\n            _dstToken,\\n            msg.sender,\\n            crossAmount,\\n            _toChainId,\\n            _dstDEX,\\n            _bridge\\n        );\\n\\n        // Now we either call to `anyCall` to execute a cross-chain function\\n        // or emit an event so a relayer can execute the swap on the other side when funds are ready\\n        // ...\\n    }\\n\\n    /// Finalize the process of swidging\\n    /// @dev This function is executed on the destination chain\\n    function finalizeTokenCross(address _dstCrossToken, address _dstToken, address _to, uint256 _crossAmount, uint256 _toChainId, uint8 _dstDEX) external {\\n        require(_toChainId == block.chainid, \\\"Wrong destination call\\\");\\n\\n        // Swap the received `dstCrossToken` into the `dstToken` desired by the user\\n        IDEX swapProvider = swapProviders[_dstDEX];\\n        TransferHelper.safeApprove(_dstCrossToken, swapProvider.custodianAddress(), _crossAmount);\\n        uint256 finalAmount = swapProvider.swap(_dstCrossToken, _dstToken, address(this), _crossAmount);\\n\\n        // Transfer `dstToken` to the user\\n        TransferHelper.safeTransfer(_dstToken, _to, finalAmount);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1368079f30f2a30399f4551d671826a9086d19f6aad23f3a4f6364ae1f1c2321\",\"license\":\"MIT\"},\"contracts/dexs/IDEX.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IDEX {\\n\\n    function custodianAddress() external view returns (address);\\n\\n    function swap(address _tokenIn, address _tokenOut, address _recipient, uint256 _amountIn) external returns (uint256 amountOut);\\n\\n}\\n\\n\",\"keccak256\":\"0xe516fc84f1129b729bac1bb1023078e924107c74de7c8f3a3cfaeaa60739b856\",\"license\":\"Unlicense\"},\"contracts/dexs/UniswapDEX.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"./IDEX.sol\\\";\\n\\ncontract UniswapDEX is IDEX {\\n    ISwapRouter public immutable swapRouter;\\n\\n    // Set the pool fee to 0.3%.\\n    uint24 public constant poolFee = 3000;\\n\\n    constructor(address _swapRouterAddress) {\\n        swapRouter = ISwapRouter(_swapRouterAddress);\\n    }\\n\\n    function custodianAddress() external view override returns (address) {\\n        return address(swapRouter);\\n    }\\n\\n    function swap(address _tokenIn, address _tokenOut, address _recipient, uint256 _amountIn) external override returns (uint256 amountOut) {\\n        // This functions requires the owner to already have allowed the provider to take the tokens\\n        uint256 amountAllowed = IERC20(_tokenIn).allowance(_recipient, address(swapRouter));\\n        require(amountAllowed == _amountIn, \\\"SWAP: Swap provider not allowed.\\\");\\n\\n        // Naively set amountOutMinimum to 0. In production, use an oracle or other data source to choose a safer value for amountOutMinimum.\\n        // We also set the sqrtPriceLimitx96 to be 0 to ensure we swap our exact input amount.\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n            tokenIn : _tokenIn,\\n            tokenOut : _tokenOut,\\n            fee : poolFee,\\n            recipient : _recipient,\\n            deadline : block.timestamp,\\n            amountIn : _amountIn,\\n            amountOutMinimum : 0, // TODO : needs to be either be asked to oracle or passed as parameter\\n            sqrtPriceLimitX96 : 0\\n        });\\n\\n        // The call to `exactInputSingle` executes the swap.\\n        amountOut = swapRouter.exactInputSingle(params);\\n    }\\n}\\n\",\"keccak256\":\"0xa150940fc9725a071d3ab68770363eee2613bbb0041db6fbf71fc20913d6d217\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200221538038062002215833981810160405281019062000037919062000555565b62000048836200006360201b60201c565b6200005a8282620000a660201b60201c565b50505062000985565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b8051825114620000ed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000e490620006c4565b60405180910390fd5b60008251141562000135576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200012c90620006a2565b60405180910390fd5b60005b82518160ff161015620002cf576000620001e1848360ff168151811062000188577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151848460ff1681518110620001cd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151620002d460201b60201c565b90508060016000858560ff168151811062000225577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151600181111562000266577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60ff1660ff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508080620002c690620007f5565b91505062000138565b505050565b600080600181111562000310577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8260018111156200034a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156200039257826040516200036090620003d5565b6200036c919062000663565b604051809103906000f08015801562000389573d6000803e3d6000fd5b509050620003cf565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003c69062000680565b60405180910390fd5b92915050565b610883806200199283390190565b6000620003fa620003f4846200070f565b620006e6565b905080838252602082019050828560208602820111156200041a57600080fd5b60005b858110156200044e5781620004338882620004cd565b8452602084019350602083019250506001810190506200041d565b5050509392505050565b60006200046f62000469846200073e565b620006e6565b905080838252602082019050828560208602820111156200048f57600080fd5b60005b85811015620004c35781620004a888826200053e565b84526020840193506020830192505060018101905062000492565b5050509392505050565b600081519050620004de816200095a565b92915050565b600082601f830112620004f657600080fd5b815162000508848260208601620003e3565b91505092915050565b600082601f8301126200052357600080fd5b81516200053584826020860162000458565b91505092915050565b6000815190506200054f8162000974565b92915050565b6000806000606084860312156200056b57600080fd5b60006200057b86828701620004cd565b935050602084015167ffffffffffffffff8111156200059957600080fd5b620005a786828701620004e4565b925050604084015167ffffffffffffffff811115620005c557600080fd5b620005d38682870162000511565b9150509250925092565b620005e8816200077e565b82525050565b6000620005fd602d836200076d565b91506200060a8262000893565b604082019050919050565b600062000624601b836200076d565b91506200063182620008e2565b602082019050919050565b60006200064b602c836200076d565b915062000658826200090b565b604082019050919050565b60006020820190506200067a6000830184620005dd565b92915050565b600060208201905081810360008301526200069b81620005ee565b9050919050565b60006020820190508181036000830152620006bd8162000615565b9050919050565b60006020820190508181036000830152620006df816200063c565b9050919050565b6000620006f262000705565b9050620007008282620007bf565b919050565b6000604051905090565b600067ffffffffffffffff8211156200072d576200072c62000853565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156200075c576200075b62000853565b5b602082029050602081019050919050565b600082825260208201905092915050565b60006200078b8262000792565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060ff82169050919050565b620007ca8262000882565b810181811067ffffffffffffffff82111715620007ec57620007eb62000853565b5b80604052505050565b60006200080282620007b2565b915060ff82141562000819576200081862000824565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f476976656e2060646578436f64656020696d706c656d656e746174696f6e207760008201527f6173206e6f7420666f756e642e00000000000000000000000000000000000000602082015250565b7f4e6f20737761702070726f76696465727320696e666f726d65642e0000000000600082015250565b7f41646472657373657320636f756e742063616e6e6f74206d69736d617463682060008201527f636f64657320636f756e742e0000000000000000000000000000000000000000602082015250565b62000965816200077e565b81146200097157600080fd5b50565b600281106200098257600080fd5b50565b610ffd80620009956000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634864177b1461003b578063ec52d23414610057575b600080fd5b6100556004803603810190610050919061099d565b610073565b005b610071600480360381019061006c9190610a63565b610342565b005b61007f893330886104f4565b6000600160008460ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506101458a8273ffffffffffffffffffffffffffffffffffffffff1663a66e4e5f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561010757600080fd5b505afa15801561011b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013f9190610974565b8861064c565b60008173ffffffffffffffffffffffffffffffffffffffff1663a9678a188c8c308b6040518563ffffffff1660e01b81526004016101869493929190610c3f565b602060405180830381600087803b1580156101a057600080fd5b505af11580156101b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d89190610b15565b90506102058a60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff168361064c565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663edbdf5e28b30848a6040518563ffffffff1660e01b81526004016102649493929190610d2a565b600060405180830381600087803b15801561027e57600080fd5b505af1158015610292573d6000803e3d6000fd5b505050506000898933848a888b6040516024016102b59796959493929190610c84565b6040516020818303038152906040527f4c87c7f7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050505050505050505050505050565b468214610384576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037b90610df8565b60405180910390fd5b6000600160008360ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061044a878273ffffffffffffffffffffffffffffffffffffffff1663a66e4e5f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561040c57600080fd5b505afa158015610420573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104449190610974565b8661064c565b60008173ffffffffffffffffffffffffffffffffffffffff1663a9678a18898930896040518563ffffffff1660e01b815260040161048b9493929190610c3f565b602060405180830381600087803b1580156104a557600080fd5b505af11580156104b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dd9190610b15565b90506104ea8787836107a1565b5050505050505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b86868660405160240161052b93929190610cf3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516105959190610c28565b6000604051808303816000865af19150503d80600081146105d2576040519150601f19603f3d011682016040523d82523d6000602084013e6105d7565b606091505b509150915081801561060557506000815114806106045750808060200190518101906106039190610aec565b5b5b610644576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063b90610dd8565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b8585604051602401610681929190610d6f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516106eb9190610c28565b6000604051808303816000865af19150503d8060008114610728576040519150601f19603f3d011682016040523d82523d6000602084013e61072d565b606091505b509150915081801561075b575060008151148061075a5750808060200190518101906107599190610aec565b5b5b61079a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079190610d98565b60405180910390fd5b5050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b85856040516024016107d6929190610d6f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516108409190610c28565b6000604051808303816000865af19150503d806000811461087d576040519150601f19603f3d011682016040523d82523d6000602084013e610882565b606091505b50915091508180156108b057506000815114806108af5750808060200190518101906108ae9190610aec565b5b5b6108ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e690610db8565b60405180910390fd5b5050505050565b60008135905061090581610f6b565b92915050565b60008151905061091a81610f6b565b92915050565b60008151905061092f81610f82565b92915050565b60008135905061094481610f99565b92915050565b60008151905061095981610f99565b92915050565b60008135905061096e81610fb0565b92915050565b60006020828403121561098657600080fd5b60006109948482850161090b565b91505092915050565b60008060008060008060008060006101208a8c0312156109bc57600080fd5b60006109ca8c828d016108f6565b99505060206109db8c828d016108f6565b98505060406109ec8c828d016108f6565b97505060606109fd8c828d016108f6565b9650506080610a0e8c828d01610935565b95505060a0610a1f8c828d01610935565b94505060c0610a308c828d0161095f565b93505060e0610a418c828d0161095f565b925050610100610a538c828d0161095f565b9150509295985092959850929598565b60008060008060008060c08789031215610a7c57600080fd5b6000610a8a89828a016108f6565b9650506020610a9b89828a016108f6565b9550506040610aac89828a016108f6565b9450506060610abd89828a01610935565b9350506080610ace89828a01610935565b92505060a0610adf89828a0161095f565b9150509295509295509295565b600060208284031215610afe57600080fd5b6000610b0c84828501610920565b91505092915050565b600060208284031215610b2757600080fd5b6000610b358482850161094a565b91505092915050565b610b4781610e3f565b82525050565b6000610b5882610e18565b610b628185610e23565b9350610b72818560208601610e94565b80840191505092915050565b6000610b8b600283610e2e565b9150610b9682610ec7565b602082019050919050565b6000610bae600283610e2e565b9150610bb982610ef0565b602082019050919050565b6000610bd1600383610e2e565b9150610bdc82610f19565b602082019050919050565b6000610bf4601683610e2e565b9150610bff82610f42565b602082019050919050565b610c1381610e7d565b82525050565b610c2281610e87565b82525050565b6000610c348284610b4d565b915081905092915050565b6000608082019050610c546000830187610b3e565b610c616020830186610b3e565b610c6e6040830185610b3e565b610c7b6060830184610c0a565b95945050505050565b600060e082019050610c99600083018a610b3e565b610ca66020830189610b3e565b610cb36040830188610b3e565b610cc06060830187610c0a565b610ccd6080830186610c0a565b610cda60a0830185610c19565b610ce760c0830184610c19565b98975050505050505050565b6000606082019050610d086000830186610b3e565b610d156020830185610b3e565b610d226040830184610c0a565b949350505050565b6000608082019050610d3f6000830187610b3e565b610d4c6020830186610b3e565b610d596040830185610c0a565b610d666060830184610c0a565b95945050505050565b6000604082019050610d846000830185610b3e565b610d916020830184610c0a565b9392505050565b60006020820190508181036000830152610db181610b7e565b9050919050565b60006020820190508181036000830152610dd181610ba1565b9050919050565b60006020820190508181036000830152610df181610bc4565b9050919050565b60006020820190508181036000830152610e1181610be7565b9050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610e4a82610e5d565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015610eb2578082015181840152602081019050610e97565b83811115610ec1576000848401525b50505050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b7f57726f6e672064657374696e6174696f6e2063616c6c00000000000000000000600082015250565b610f7481610e3f565b8114610f7f57600080fd5b50565b610f8b81610e51565b8114610f9657600080fd5b50565b610fa281610e7d565b8114610fad57600080fd5b50565b610fb981610e87565b8114610fc457600080fd5b5056fea26469706673582212200118046acab72f52d0359dc0b5cdec76ab152b5ab65453f9e784fc75986d105564736f6c6343000801003360a060405234801561001057600080fd5b5060405161088338038061088383398181016040528101906100329190610084565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050506100f6565b60008151905061007e816100df565b92915050565b60006020828403121561009657600080fd5b60006100a48482850161006f565b91505092915050565b60006100b8826100bf565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100e8816100ad565b81146100f357600080fd5b50565b60805160601c61075b6101286000396000818160e50152818161012b0152818161029c0152610353015261075b6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063089fe6aa14610051578063a66e4e5f1461006f578063a9678a181461008d578063c31c9c07146100bd575b600080fd5b6100596100db565b6040516100669190610618565b60405180910390f35b6100776100e1565b604051610084919061057d565b60405180910390f35b6100a760048036038101906100a291906103b4565b610109565b6040516100b49190610633565b60405180910390f35b6100c5610351565b6040516100d291906105c1565b60405180910390f35b610bb881565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000808573ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e857f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401610167929190610598565b60206040518083038186803b15801561017f57600080fd5b505afa158015610193573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b79190610417565b90508281146101fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f2906105dc565b60405180910390fd5b60006040518061010001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815260200142815260200185815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663414bf389826040518263ffffffff1660e01b81526004016102f391906105fc565b602060405180830381600087803b15801561030d57600080fd5b505af1158015610321573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103459190610417565b92505050949350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600081359050610384816106f7565b92915050565b6000813590506103998161070e565b92915050565b6000815190506103ae8161070e565b92915050565b600080600080608085870312156103ca57600080fd5b60006103d887828801610375565b94505060206103e987828801610375565b93505060406103fa87828801610375565b925050606061040b8782880161038a565b91505092959194509250565b60006020828403121561042957600080fd5b60006104378482850161039f565b91505092915050565b6104498161065f565b82525050565b6104588161065f565b82525050565b610467816106aa565b82525050565b600061047a60208361064e565b9150610485826106ce565b602082019050919050565b610100820160008201516104a76000850182610440565b5060208201516104ba6020850182610440565b5060408201516104cd6040850182610541565b5060608201516104e06060850182610440565b5060808201516104f3608085018261055f565b5060a082015161050660a085018261055f565b5060c082015161051960c085018261055f565b5060e082015161052c60e0850182610532565b50505050565b61053b81610671565b82525050565b61054a81610691565b82525050565b61055981610691565b82525050565b610568816106a0565b82525050565b610577816106a0565b82525050565b6000602082019050610592600083018461044f565b92915050565b60006040820190506105ad600083018561044f565b6105ba602083018461044f565b9392505050565b60006020820190506105d6600083018461045e565b92915050565b600060208201905081810360008301526105f58161046d565b9050919050565b6000610100820190506106126000830184610490565b92915050565b600060208201905061062d6000830184610550565b92915050565b6000602082019050610648600083018461056e565b92915050565b600082825260208201905092915050565b600061066a82610671565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b60006106b5826106bc565b9050919050565b60006106c782610671565b9050919050565b7f535741503a20537761702070726f7669646572206e6f7420616c6c6f7765642e600082015250565b6107008161065f565b811461070b57600080fd5b50565b610717816106a0565b811461072257600080fd5b5056fea2646970667358221220f6f39c6f0ebf0aed4c7b4dd574e72423f973107190dd37b13026b175581f95d964736f6c63430008010033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_anyswapRouterAddress": "Address of the default bridge",
          "_dexAddresses": "Array of DEX addresses",
          "_dexCodes": "Array of DEX identifiers"
        }
      },
      "finalizeTokenCross(address,address,address,uint256,uint256,uint8)": {
        "details": "This function is executed on the destination chain"
      },
      "initTokensCross(address,address,address,address,uint256,uint256,uint8,uint8,uint8)": {
        "details": "This function is executed on the origin chain",
        "params": {
          "_dstCrossToken": "Address of the token that will arrive to the destination chain",
          "_dstDEX": "Identifier of the exchange to use on the destination chain",
          "_dstToken": "Address of the token the user wants to receive on destination",
          "_srcAmount": "Amount of source tokens that user wants to move",
          "_srcCrossToken": "Address of the token we will swap on origin chain to send to the bridge",
          "_srcDEX": "Identifier of the exchange to use on the origin chain",
          "_srcToken": "Address of the token the user wants to swidge",
          "_toChainId": "Chain identifier that the user wants its token to receive"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "finalizeTokenCross(address,address,address,uint256,uint256,uint8)": {
        "notice": "Finalize the process of swidging"
      },
      "initTokensCross(address,address,address,address,uint256,uint256,uint8,uint8,uint8)": {
        "notice": "Init the process of swidging"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 383,
        "contract": "contracts/Router.sol:Router",
        "label": "bridge",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AnyswapRouter)380"
      },
      {
        "astId": 388,
        "contract": "contracts/Router.sol:Router",
        "label": "swapProviders",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint8,t_contract(IDEX)711)"
      }
    ],
    "types": {
      "t_contract(AnyswapRouter)380": {
        "encoding": "inplace",
        "label": "contract AnyswapRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IDEX)711": {
        "encoding": "inplace",
        "label": "contract IDEX",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint8,t_contract(IDEX)711)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => contract IDEX)",
        "numberOfBytes": "32",
        "value": "t_contract(IDEX)711"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}