{
  "language": "Solidity",
  "sources": {
    "contracts/bridge/Anyswap.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"./IBridge.sol\";\n\ninterface AnyswapRouter {\n    function anySwapOutUnderlying(address token, address to, uint amount, uint toChainID) external;\n}\n\ncontract Anyswap is IBridge {\n    AnyswapRouter private bridge;\n\n    constructor(address bridgeAddress) {\n        bridge = AnyswapRouter(bridgeAddress);\n    }\n\n    function send(\n        address _token,\n        address _router,\n        uint256 _amount,\n        uint256 _toChainId,\n        bytes calldata _data\n    ) external override onlyRouter {\n        // Take ownership of tokens\n        TransferHelper.safeTransferFrom(_token, _router, address(this), _amount);\n\n        // Approve tokens for the bridge to take\n        TransferHelper.safeApprove(_token, address(bridge), _amount);\n\n        // Decode data to get address of custom token\n        address _anyTokenAddress = abi.decode(_data, (address));\n\n        // Execute bridge process\n        bridge.anySwapOutUnderlying(_anyTokenAddress, _router, _amount, _toChainId);\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}\n"
    },
    "contracts/bridge/IBridge.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\n\nabstract contract IBridge is Ownable {\n    address private router;\n\n    modifier onlyRouter() {\n        require(msg.sender == router, \"Unauthorized caller\");\n        _;\n    }\n\n    event UpdatedRouter(address indexed routerAddress);\n\n    function updateRouter(address routerAddress) external onlyOwner {\n        router = routerAddress;\n        emit UpdatedRouter(routerAddress);\n    }\n\n    function retrieve(address _token, uint256 _amount) external onlyOwner {\n        TransferHelper.safeTransfer(_token, msg.sender, _amount);\n    }\n\n    function send(\n        address _token,\n        address _router,\n        uint256 _amount,\n        uint256 _toChainId,\n        bytes calldata _data\n    ) external virtual;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/Router.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"./dexs/IDEX.sol\";\nimport \"./bridge/IBridge.sol\";\n\ncontract Router is Ownable {\n    mapping(uint8 => IBridge) private bridgeProviders;\n\n    enum bridgeCode {\n        Anyswap // 0\n    }\n\n    /// @param _anyswapRouterAddress Address of the default bridge\n    constructor(address _anyswapRouterAddress) {\n        bridgeProviders[uint8(bridgeCode.Anyswap)] = IBridge(_anyswapRouterAddress);\n    }\n\n    struct SwapData {\n        address tokenIn;\n        address tokenOut;\n        address payable callAddress;\n        bytes callData;\n    }\n\n    struct BridgeData {\n        address tokenIn;\n        uint256 toChainId;\n        bytes data;\n    }\n\n    event CrossInitiated(\n        uint256 indexed toChainId,\n        uint256 amount,\n        address receiver,\n        address dstSwapIn,\n        address dstSwapOut,\n        address maker,\n        bytes data\n    );\n\n    /// Init the process of swidging\n    /// @dev This function is executed on the origin chain\n    function initTokensCross(\n        uint256 _srcAmount,\n        SwapData calldata _srcSwapData,\n        SwapData calldata _dstSwapData,\n        BridgeData calldata _bridgeData\n    ) external payable {\n        // Take ownership of user's tokens\n        TransferHelper.safeTransferFrom(\n            _srcSwapData.tokenIn,\n            msg.sender,\n            address(this),\n            _srcAmount\n        );\n\n        // Approve to ZeroEx\n        TransferHelper.safeApprove(\n            _srcSwapData.tokenIn,\n            _srcSwapData.callAddress,\n            _srcAmount\n        );\n\n        // Execute swap with ZeroEx and compute final `boughtAmount`\n        uint256 boughtAmount = IERC20(_srcSwapData.tokenOut).balanceOf(address(this));\n        (bool success,) = _srcSwapData.callAddress.call{value : msg.value}(_srcSwapData.callData);\n        require(success, \"SWAP FAILED\");\n        boughtAmount = IERC20(_srcSwapData.tokenOut).balanceOf(address(this)) - boughtAmount;\n\n        // Load selected bridge provider\n        IBridge bridge = bridgeProviders[uint8(bridgeCode.Anyswap)];\n\n        // Approve tokens for the bridge to take\n        TransferHelper.safeApprove(\n            _bridgeData.tokenIn,\n            address(bridge),\n            boughtAmount\n        );\n\n        // Execute bridge process\n        bridge.send(\n            _bridgeData.tokenIn,\n            address(this),\n            boughtAmount,\n            _bridgeData.toChainId,\n            _bridgeData.data\n        );\n\n        // Refund any unspent protocol fees to the sender.\n        payable(msg.sender).transfer(address(this).balance);\n\n        // Emit event for relayer\n        emit CrossInitiated(\n            _bridgeData.toChainId,\n            boughtAmount,\n            msg.sender,\n            _dstSwapData.tokenIn,\n            _dstSwapData.tokenOut,\n            _dstSwapData.callAddress,\n            _dstSwapData.callData\n        );\n    }\n\n    /// Finalize the process of swidging\n    function finalizeTokenCross(\n        SwapData calldata _swapData,\n        uint256 _amount,\n        address _receiver\n    ) external payable {\n        // Approve to ZeroEx\n        TransferHelper.safeApprove(\n            _swapData.tokenIn,\n            _swapData.callAddress,\n            _amount\n        );\n\n        // Execute swap with ZeroEx and compute final `boughtAmount`\n        uint256 boughtAmount = IERC20(_swapData.tokenOut).balanceOf(address(this));\n        (bool success,) = _swapData.callAddress.call{value : msg.value}(_swapData.callData);\n        require(success, \"SWAP FAILED\");\n        boughtAmount = IERC20(_swapData.tokenOut).balanceOf(address(this)) - boughtAmount;\n\n        // Send tokens to the user\n        TransferHelper.safeTransfer(\n            _swapData.tokenOut,\n            _receiver,\n            boughtAmount\n        );\n    }\n\n    /// To retrieve any tokens that got stuck on the contract\n    function retrieve(address _token, uint256 _amount) external onlyOwner {\n        TransferHelper.safeTransfer(_token, msg.sender, _amount);\n    }\n}\n"
    },
    "contracts/dexs/IDEX.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\ninterface IDEX {\n\n    function custodianAddress() external view returns (address);\n\n    function swap(\n        address _tokenIn,\n        address _tokenOut,\n        address _from,\n        address _to,\n        uint256 _amountIn,\n        bytes calldata _data\n    ) external returns (uint256 amountOut);\n\n}\n\n"
    },
    "contracts/dexs/Uniswap.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\";\nimport \"./IDEX.sol\";\n\ncontract Uniswap is IDEX {\n    address private swapRouterAddress;\n\n    // Set the pool fee to 0.3%.\n    uint24 public constant poolFee = 3000;\n\n    constructor(address _swapRouterAddress) {\n        swapRouterAddress = _swapRouterAddress;\n    }\n\n    function custodianAddress() external view override returns (address) {\n        return swapRouterAddress;\n    }\n\n    function swap(\n        address _tokenIn,\n        address _tokenOut,\n        address _from,\n        address _to,\n        uint256 _amountIn,\n        bytes calldata _data\n    ) external override returns (uint256 amountOut) {\n        TransferHelper.safeTransferFrom(_tokenIn, _from, address(this), _amountIn);\n        TransferHelper.safeApprove(_tokenIn, swapRouterAddress, _amountIn);\n\n        uint256 _minimumAmountOut = abi.decode(_data, (uint256));\n\n        // Set the sqrtPriceLimitx96 to be 0 to ensure we swap our exact input amount.\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\n            tokenIn : _tokenIn,\n            tokenOut : _tokenOut,\n            fee : poolFee,\n            recipient : _to,\n            deadline : block.timestamp,\n            amountIn : _amountIn,\n            amountOutMinimum : _minimumAmountOut,\n            sqrtPriceLimitX96 : 0\n        });\n\n        // The call to `exactInputSingle` executes the swap.\n        amountOut = ISwapRouter(swapRouterAddress).exactInputSingle(params);\n    }\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}