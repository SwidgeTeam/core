{
  "address": "0xb95f4f9767F9C837dCab7F3956760350F16dD95E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridgeAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "routerAddress",
          "type": "address"
        }
      ],
      "name": "UpdatedRouter",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "retrieve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toChainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "routerAddress",
          "type": "address"
        }
      ],
      "name": "updateRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbf308eefb8f43782274aa1cefadcaf054bbb39c55f02794a5bfcebdd857adc96",
  "receipt": {
    "to": null,
    "from": "0x7228ebf7C311e82867F08Ad6Dd3FCfbC2adB41A9",
    "contractAddress": "0xb95f4f9767F9C837dCab7F3956760350F16dD95E",
    "transactionIndex": 67,
    "gasUsed": "1069320",
    "logsBloom": "0x0000000000000000000000020000000000000000000000000080000000000040000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000800001000000400000000100000000000000000000020000000000000000000800000008000000000080000000000000400000000000000000000000000000000000000000000000000000000000000000200000000000080000000000000000000000000000000000000000000000004000200000000000000001000000000040000000000000000000100000000020000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0xa14b2a570c6159a55bab90f5ffc962e4bacdfe2c15539de145ab7fb0f9ef4b19",
    "transactionHash": "0xbf308eefb8f43782274aa1cefadcaf054bbb39c55f02794a5bfcebdd857adc96",
    "logs": [
      {
        "transactionIndex": 67,
        "blockNumber": 27282158,
        "transactionHash": "0xbf308eefb8f43782274aa1cefadcaf054bbb39c55f02794a5bfcebdd857adc96",
        "address": "0xb95f4f9767F9C837dCab7F3956760350F16dD95E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007228ebf7c311e82867f08ad6dd3fcfbc2adb41a9"
        ],
        "data": "0x",
        "logIndex": 270,
        "blockHash": "0xa14b2a570c6159a55bab90f5ffc962e4bacdfe2c15539de145ab7fb0f9ef4b19"
      },
      {
        "transactionIndex": 67,
        "blockNumber": 27282158,
        "transactionHash": "0xbf308eefb8f43782274aa1cefadcaf054bbb39c55f02794a5bfcebdd857adc96",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007228ebf7c311e82867f08ad6dd3fcfbc2adb41a9",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x000000000000000000000000000000000000000000000000007d81841eeb31500000000000000000000000000000000000000000000000001b0a69ce8f8a7af900000000000000000000000000000000000000000000d5f7e66a608b599f3c200000000000000000000000000000000000000000000000001a8ce84a709f49a900000000000000000000000000000000000000000000d5f7e6e7e20f788a6d70",
        "logIndex": 271,
        "blockHash": "0xa14b2a570c6159a55bab90f5ffc962e4bacdfe2c15539de145ab7fb0f9ef4b19"
      }
    ],
    "blockNumber": 27282158,
    "cumulativeGasUsed": "10654987",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4f3aff3a747fcade12598081e80c6605a8be192f"
  ],
  "numDeployments": 1,
  "solcInputHash": "85e3bad8a7553ecd0888d2671c208e6e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"name\":\"UpdatedRouter\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"retrieve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridge/Anyswap.sol\":\"Anyswap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/bridge/Anyswap.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"./IBridge.sol\\\";\\n\\ninterface AnyswapRouter {\\n    function anySwapOutUnderlying(address token, address to, uint amount, uint toChainID) external;\\n}\\n\\ncontract Anyswap is IBridge {\\n    AnyswapRouter private bridge;\\n\\n    constructor(address bridgeAddress) {\\n        bridge = AnyswapRouter(bridgeAddress);\\n    }\\n\\n    function send(\\n        address _token,\\n        address _router,\\n        uint256 _amount,\\n        uint256 _toChainId,\\n        bytes calldata _data\\n    ) external override onlyRouter {\\n        // Take ownership of tokens\\n        TransferHelper.safeTransferFrom(_token, _router, address(this), _amount);\\n\\n        // Approve tokens for the bridge to take\\n        TransferHelper.safeApprove(_token, address(bridge), _amount);\\n\\n        // Decode data to get address of custom token\\n        address _anyTokenAddress = abi.decode(_data, (address));\\n\\n        // Execute bridge process\\n        bridge.anySwapOutUnderlying(_anyTokenAddress, _router, _amount, _toChainId);\\n    }\\n}\\n\",\"keccak256\":\"0x7febdf81ce51319b1a0ff361ffbcb709b787a12e95de9cd11a2598431eb208a4\",\"license\":\"MIT\"},\"contracts/bridge/IBridge.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\n\\nabstract contract IBridge is Ownable {\\n    address private router;\\n\\n    modifier onlyRouter() {\\n        require(msg.sender == router, \\\"Unauthorized caller\\\");\\n        _;\\n    }\\n\\n    event UpdatedRouter(address indexed routerAddress);\\n\\n    function updateRouter(address routerAddress) external onlyOwner {\\n        router = routerAddress;\\n        emit UpdatedRouter(routerAddress);\\n    }\\n\\n    function retrieve(address _token, uint256 _amount) external onlyOwner {\\n        TransferHelper.safeTransfer(_token, msg.sender, _amount);\\n    }\\n\\n    function send(\\n        address _token,\\n        address _router,\\n        uint256 _amount,\\n        uint256 _toChainId,\\n        bytes calldata _data\\n    ) external virtual;\\n}\\n\",\"keccak256\":\"0x9fc067f1481aef391239bf62c5fa8fed97120e24085b7674d90e11b9bfbac4b4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200138938038062001389833981810160405281019062000037919062000182565b620000576200004b6200009f60201b60201c565b620000a760201b60201c565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620001fc565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000815190506200017c81620001e2565b92915050565b6000602082840312156200019557600080fd5b6000620001a5848285016200016b565b91505092915050565b6000620001bb82620001c2565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620001ed81620001ae565b8114620001f957600080fd5b50565b61117d806200020c6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063148f2d1114610067578063715018a6146100835780638da5cb5b1461008d578063c3a2a665146100ab578063c851cc32146100c7578063f2fde38b146100e3575b600080fd5b610081600480360381019061007c9190610b6c565b6100ff565b005b61008b610277565b005b6100956102ff565b6040516100a29190610d9b565b60405180910390f35b6100c560048036038101906100c09190610bfe565b610328565b005b6100e160048036038101906100dc9190610b1a565b6103b3565b005b6100fd60048036038101906100f89190610b1a565b6104b6565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461018f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018690610e9b565b60405180910390fd5b61019b868630876105ae565b6101c886600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686610706565b600082828101906101d99190610b43565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663edbdf5e2828888886040518563ffffffff1660e01b815260040161023c9493929190610ded565b600060405180830381600087803b15801561025657600080fd5b505af115801561026a573d6000803e3d6000fd5b5050505050505050505050565b61027f61085b565b73ffffffffffffffffffffffffffffffffffffffff1661029d6102ff565b73ffffffffffffffffffffffffffffffffffffffff16146102f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90610edb565b60405180910390fd5b6102fd6000610863565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61033061085b565b73ffffffffffffffffffffffffffffffffffffffff1661034e6102ff565b73ffffffffffffffffffffffffffffffffffffffff16146103a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039b90610edb565b60405180910390fd5b6103af823383610927565b5050565b6103bb61085b565b73ffffffffffffffffffffffffffffffffffffffff166103d96102ff565b73ffffffffffffffffffffffffffffffffffffffff161461042f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042690610edb565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f66fc0187dfabf79860e1b18e6c175c92baf9ed88c8a01d0bfdb97d1f0450f7f760405160405180910390a250565b6104be61085b565b73ffffffffffffffffffffffffffffffffffffffff166104dc6102ff565b73ffffffffffffffffffffffffffffffffffffffff1614610532576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052990610edb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059990610e7b565b60405180910390fd5b6105ab81610863565b50565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b8686866040516024016105e593929190610db6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161064f9190610d84565b6000604051808303816000865af19150503d806000811461068c576040519150601f19603f3d011682016040523d82523d6000602084013e610691565b606091505b50915091508180156106bf57506000815114806106be5750808060200190518101906106bd9190610c3a565b5b5b6106fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f590610efb565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b858560405160240161073b929190610e32565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516107a59190610d84565b6000604051808303816000865af19150503d80600081146107e2576040519150601f19603f3d011682016040523d82523d6000602084013e6107e7565b606091505b509150915081801561081557506000815114806108145750808060200190518101906108139190610c3a565b5b5b610854576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084b90610e5b565b60405180910390fd5b5050505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b858560405160240161095c929190610e32565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516109c69190610d84565b6000604051808303816000865af19150503d8060008114610a03576040519150601f19603f3d011682016040523d82523d6000602084013e610a08565b606091505b5091509150818015610a365750600081511480610a35575080806020019051810190610a349190610c3a565b5b5b610a75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6c90610ebb565b60405180910390fd5b5050505050565b600081359050610a8b816110eb565b92915050565b600081359050610aa081611102565b92915050565b600081519050610ab581611119565b92915050565b60008083601f840112610acd57600080fd5b8235905067ffffffffffffffff811115610ae657600080fd5b602083019150836001820283011115610afe57600080fd5b9250929050565b600081359050610b1481611130565b92915050565b600060208284031215610b2c57600080fd5b6000610b3a84828501610a7c565b91505092915050565b600060208284031215610b5557600080fd5b6000610b6384828501610a91565b91505092915050565b60008060008060008060a08789031215610b8557600080fd5b6000610b9389828a01610a7c565b9650506020610ba489828a01610a7c565b9550506040610bb589828a01610b05565b9450506060610bc689828a01610b05565b935050608087013567ffffffffffffffff811115610be357600080fd5b610bef89828a01610abb565b92509250509295509295509295565b60008060408385031215610c1157600080fd5b6000610c1f85828601610a7c565b9250506020610c3085828601610b05565b9150509250929050565b600060208284031215610c4c57600080fd5b6000610c5a84828501610aa6565b91505092915050565b610c6c81610f42565b82525050565b6000610c7d82610f1b565b610c878185610f26565b9350610c97818560208601610f9c565b80840191505092915050565b6000610cb0600283610f31565b9150610cbb82610fcf565b602082019050919050565b6000610cd3602683610f31565b9150610cde82610ff8565b604082019050919050565b6000610cf6601383610f31565b9150610d0182611047565b602082019050919050565b6000610d19600283610f31565b9150610d2482611070565b602082019050919050565b6000610d3c602083610f31565b9150610d4782611099565b602082019050919050565b6000610d5f600383610f31565b9150610d6a826110c2565b602082019050919050565b610d7e81610f92565b82525050565b6000610d908284610c72565b915081905092915050565b6000602082019050610db06000830184610c63565b92915050565b6000606082019050610dcb6000830186610c63565b610dd86020830185610c63565b610de56040830184610d75565b949350505050565b6000608082019050610e026000830187610c63565b610e0f6020830186610c63565b610e1c6040830185610d75565b610e296060830184610d75565b95945050505050565b6000604082019050610e476000830185610c63565b610e546020830184610d75565b9392505050565b60006020820190508181036000830152610e7481610ca3565b9050919050565b60006020820190508181036000830152610e9481610cc6565b9050919050565b60006020820190508181036000830152610eb481610ce9565b9050919050565b60006020820190508181036000830152610ed481610d0c565b9050919050565b60006020820190508181036000830152610ef481610d2f565b9050919050565b60006020820190508181036000830152610f1481610d52565b9050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610f4d82610f72565b9050919050565b6000610f5f82610f72565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610fba578082015181840152602081019050610f9f565b83811115610fc9576000848401525b50505050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f556e617574686f72697a65642063616c6c657200000000000000000000000000600082015250565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b6110f481610f42565b81146110ff57600080fd5b50565b61110b81610f54565b811461111657600080fd5b50565b61112281610f66565b811461112d57600080fd5b50565b61113981610f92565b811461114457600080fd5b5056fea264697066735822122029fc2f0eea4774b192dd58cb90f958c012cea319c864ac150b9da7ce689f16b664736f6c63430008010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063148f2d1114610067578063715018a6146100835780638da5cb5b1461008d578063c3a2a665146100ab578063c851cc32146100c7578063f2fde38b146100e3575b600080fd5b610081600480360381019061007c9190610b6c565b6100ff565b005b61008b610277565b005b6100956102ff565b6040516100a29190610d9b565b60405180910390f35b6100c560048036038101906100c09190610bfe565b610328565b005b6100e160048036038101906100dc9190610b1a565b6103b3565b005b6100fd60048036038101906100f89190610b1a565b6104b6565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461018f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018690610e9b565b60405180910390fd5b61019b868630876105ae565b6101c886600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686610706565b600082828101906101d99190610b43565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663edbdf5e2828888886040518563ffffffff1660e01b815260040161023c9493929190610ded565b600060405180830381600087803b15801561025657600080fd5b505af115801561026a573d6000803e3d6000fd5b5050505050505050505050565b61027f61085b565b73ffffffffffffffffffffffffffffffffffffffff1661029d6102ff565b73ffffffffffffffffffffffffffffffffffffffff16146102f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ea90610edb565b60405180910390fd5b6102fd6000610863565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61033061085b565b73ffffffffffffffffffffffffffffffffffffffff1661034e6102ff565b73ffffffffffffffffffffffffffffffffffffffff16146103a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039b90610edb565b60405180910390fd5b6103af823383610927565b5050565b6103bb61085b565b73ffffffffffffffffffffffffffffffffffffffff166103d96102ff565b73ffffffffffffffffffffffffffffffffffffffff161461042f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042690610edb565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f66fc0187dfabf79860e1b18e6c175c92baf9ed88c8a01d0bfdb97d1f0450f7f760405160405180910390a250565b6104be61085b565b73ffffffffffffffffffffffffffffffffffffffff166104dc6102ff565b73ffffffffffffffffffffffffffffffffffffffff1614610532576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052990610edb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156105a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059990610e7b565b60405180910390fd5b6105ab81610863565b50565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b8686866040516024016105e593929190610db6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161064f9190610d84565b6000604051808303816000865af19150503d806000811461068c576040519150601f19603f3d011682016040523d82523d6000602084013e610691565b606091505b50915091508180156106bf57506000815114806106be5750808060200190518101906106bd9190610c3a565b5b5b6106fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f590610efb565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b858560405160240161073b929190610e32565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516107a59190610d84565b6000604051808303816000865af19150503d80600081146107e2576040519150601f19603f3d011682016040523d82523d6000602084013e6107e7565b606091505b509150915081801561081557506000815114806108145750808060200190518101906108139190610c3a565b5b5b610854576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084b90610e5b565b60405180910390fd5b5050505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b858560405160240161095c929190610e32565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516109c69190610d84565b6000604051808303816000865af19150503d8060008114610a03576040519150601f19603f3d011682016040523d82523d6000602084013e610a08565b606091505b5091509150818015610a365750600081511480610a35575080806020019051810190610a349190610c3a565b5b5b610a75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6c90610ebb565b60405180910390fd5b5050505050565b600081359050610a8b816110eb565b92915050565b600081359050610aa081611102565b92915050565b600081519050610ab581611119565b92915050565b60008083601f840112610acd57600080fd5b8235905067ffffffffffffffff811115610ae657600080fd5b602083019150836001820283011115610afe57600080fd5b9250929050565b600081359050610b1481611130565b92915050565b600060208284031215610b2c57600080fd5b6000610b3a84828501610a7c565b91505092915050565b600060208284031215610b5557600080fd5b6000610b6384828501610a91565b91505092915050565b60008060008060008060a08789031215610b8557600080fd5b6000610b9389828a01610a7c565b9650506020610ba489828a01610a7c565b9550506040610bb589828a01610b05565b9450506060610bc689828a01610b05565b935050608087013567ffffffffffffffff811115610be357600080fd5b610bef89828a01610abb565b92509250509295509295509295565b60008060408385031215610c1157600080fd5b6000610c1f85828601610a7c565b9250506020610c3085828601610b05565b9150509250929050565b600060208284031215610c4c57600080fd5b6000610c5a84828501610aa6565b91505092915050565b610c6c81610f42565b82525050565b6000610c7d82610f1b565b610c878185610f26565b9350610c97818560208601610f9c565b80840191505092915050565b6000610cb0600283610f31565b9150610cbb82610fcf565b602082019050919050565b6000610cd3602683610f31565b9150610cde82610ff8565b604082019050919050565b6000610cf6601383610f31565b9150610d0182611047565b602082019050919050565b6000610d19600283610f31565b9150610d2482611070565b602082019050919050565b6000610d3c602083610f31565b9150610d4782611099565b602082019050919050565b6000610d5f600383610f31565b9150610d6a826110c2565b602082019050919050565b610d7e81610f92565b82525050565b6000610d908284610c72565b915081905092915050565b6000602082019050610db06000830184610c63565b92915050565b6000606082019050610dcb6000830186610c63565b610dd86020830185610c63565b610de56040830184610d75565b949350505050565b6000608082019050610e026000830187610c63565b610e0f6020830186610c63565b610e1c6040830185610d75565b610e296060830184610d75565b95945050505050565b6000604082019050610e476000830185610c63565b610e546020830184610d75565b9392505050565b60006020820190508181036000830152610e7481610ca3565b9050919050565b60006020820190508181036000830152610e9481610cc6565b9050919050565b60006020820190508181036000830152610eb481610ce9565b9050919050565b60006020820190508181036000830152610ed481610d0c565b9050919050565b60006020820190508181036000830152610ef481610d2f565b9050919050565b60006020820190508181036000830152610f1481610d52565b9050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610f4d82610f72565b9050919050565b6000610f5f82610f72565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015610fba578082015181840152602081019050610f9f565b83811115610fc9576000848401525b50505050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f556e617574686f72697a65642063616c6c657200000000000000000000000000600082015250565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b6110f481610f42565b81146110ff57600080fd5b50565b61110b81610f54565b811461111657600080fd5b50565b61112281610f66565b811461112d57600080fd5b50565b61113981610f92565b811461114457600080fd5b5056fea264697066735822122029fc2f0eea4774b192dd58cb90f958c012cea319c864ac150b9da7ce689f16b664736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/bridge/Anyswap.sol:Anyswap",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 907,
        "contract": "contracts/bridge/Anyswap.sol:Anyswap",
        "label": "router",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 827,
        "contract": "contracts/bridge/Anyswap.sol:Anyswap",
        "label": "bridge",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AnyswapRouter)822"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(AnyswapRouter)822": {
        "encoding": "inplace",
        "label": "contract AnyswapRouter",
        "numberOfBytes": "20"
      }
    }
  }
}