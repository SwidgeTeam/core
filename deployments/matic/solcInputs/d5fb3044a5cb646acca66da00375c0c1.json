{
  "language": "Solidity",
  "sources": {
    "contracts/Router.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\";\nimport \"./dexs/IDEX.sol\";\n\ninterface AnyswapRouter {\n    function anySwapOutUnderlying(address token, address to, uint amount, uint toChainID) external;\n}\n\ncontract Router {\n    AnyswapRouter private bridge;\n    mapping(uint8 => IDEX) private swapProviders;\n\n    enum dexCode {\n        Uniswap, // 0\n        Sushiswap // 1\n        // ...\n    }\n\n    /// @param _anyswapRouterAddress Address of the default bridge\n    /// @param _dexAddresses Array of DEX addresses\n    /// @param _dexCodes Array of DEX identifiers\n    constructor(address _anyswapRouterAddress, address[] memory _dexAddresses, dexCode[] memory _dexCodes) {\n        initializeBridge(_anyswapRouterAddress);\n        initializeDEXs(_dexAddresses, _dexCodes);\n    }\n\n    /// Initialize bridge address\n    /// @dev _anyswapRouterAddress Address of AnyswapRouter contract\n    function initializeBridge(address _anyswapRouterAddress) internal {\n        bridge = AnyswapRouter(_anyswapRouterAddress);\n    }\n\n    /// Initialize the mapping of DEX's that router has available in its network\n    /// @dev codes and addresses need to be same length, otherwise we fail\n    /// @param _dexAddresses Array of DEX addresses\n    /// @param _dexCodes Array of DEX identifiers\n    function initializeDEXs(address[] memory _dexAddresses, dexCode[] memory _dexCodes) private {\n        require(_dexAddresses.length == _dexCodes.length, \"Addresses count cannot mismatch codes count.\");\n        require(_dexAddresses.length != 0, \"No swap providers informed.\");\n        for (uint8 i = 0; i < _dexAddresses.length; i++) {\n            IDEX provider = IDEX(_dexAddresses[i]);\n            swapProviders[uint8(_dexCodes[i])] = provider;\n        }\n    }\n\n    /// Init the process of swidging\n    /// @dev This function is executed on the origin chain\n    /// @param _srcToken Address of the token the user wants to swidge\n    /// @param _srcCrossToken Address of the token we will swap on origin chain to send to the bridge\n    /// @param _dstCrossToken Address of the token that will arrive to the destination chain\n    /// @param _dstToken Address of the token the user wants to receive on destination\n    /// @param _srcAmount Amount of source tokens that user wants to move\n    /// @param _toChainId Chain identifier that the user wants its token to receive\n    /// @param _srcDEX Identifier of the exchange to use on the origin chain\n    /// @param _dstDEX Identifier of the exchange to use on the destination chain\n    function initTokensCross(\n        address _srcToken,\n        address _srcCrossToken,\n        address _dstCrossToken,\n        address _dstToken,\n        uint256 _srcAmount,\n        uint256 _toChainId,\n        uint8 _bridge,\n        uint8 _srcDEX,\n        uint8 _dstDEX\n    ) external {\n        // Take ownership of user's tokens\n        TransferHelper.safeTransferFrom(_srcToken, msg.sender, address(this), _srcAmount);\n\n        // Load selected swap provider\n        IDEX swapProvider = swapProviders[_srcDEX];\n\n        // Approve tokens for the provider to take\n        TransferHelper.safeApprove(_srcToken, address(swapProvider), _srcAmount);\n\n        // Execute swap\n        uint256 amountOut = swapProvider.swap(_srcToken, _srcCrossToken, address(this), _srcAmount);\n\n        // Approve tokens for the bridge to take\n        TransferHelper.safeApprove(_srcCrossToken, address(bridge), amountOut);\n\n        // Execute bridge process\n        bridge.anySwapOutUnderlying(_srcCrossToken, address(this), amountOut, _toChainId);\n    }\n\n    /// Finalize the process of swidging\n    function finalizeTokenCross(address _dstCrossToken, address _dstToken, address _to, uint256 _crossAmount, uint256 _toChainId, uint8 _dstDEX) external {\n\n    }\n\n    /// To retrieve any tokens that got stuck on the contract\n    function retrieve(address _token, uint256 _amount) external {\n        TransferHelper.safeTransfer(_token, msg.sender, _amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}\n"
    },
    "contracts/dexs/IDEX.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\npragma solidity ^0.8.0;\n\ninterface IDEX {\n\n    function custodianAddress() external view returns (address);\n\n    function swap(address _tokenIn, address _tokenOut, address _recipient, uint256 _amountIn) external returns (uint256 amountOut);\n\n}\n\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}