{
  "address": "0x474A58cc1EE12B7911B957DFE07Bfc748Eb3CaBF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapRouterAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "custodianAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolFee",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe07a5c81ad9ac67cbe0279d5d0614d0ea931162a27e71bfc2c2437ef642e9e47",
  "receipt": {
    "to": null,
    "from": "0x335e2912D888F76326e806C666B690Df2D886D07",
    "contractAddress": "0x474A58cc1EE12B7911B957DFE07Bfc748Eb3CaBF",
    "transactionIndex": 18,
    "gasUsed": "646585",
    "logsBloom": "0x
    "blockHash": "0xca3d768a9b0a1e00754db2639c9ea0c8122a92979142a64f71395ef4bbf5b4e6",
    "transactionHash": "0xe07a5c81ad9ac67cbe0279d5d0614d0ea931162a27e71bfc2c2437ef642e9e47",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 26423173,
        "transactionHash": "0xe07a5c81ad9ac67cbe0279d5d0614d0ea931162a27e71bfc2c2437ef642e9e47",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000335e2912d888f76326e806c666b690df2d886d07",
          "0x000000000000000000000000b95d435df3f8b2a8d8b9c2b7c8766c9ae6ed8cc9"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000072db47fad1a05c00000000000000000000000000000000000000000000000037735780693d9acc000000000000000000000000000000000000000000002a7c8860ae9825b8daee00000000000000000000000000000000000000000000000037007c386e6bfa70000000000000000000000000000000000000000000002a7c88d389e0208a7b4a",
        "logIndex": 75,
        "blockHash": "0xca3d768a9b0a1e00754db2639c9ea0c8122a92979142a64f71395ef4bbf5b4e6"
      }
    ],
    "blockNumber": 26423173,
    "cumulativeGasUsed": "9795543",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE592427A0AEce92De3Edee1F18E0157C05861564"
  ],
  "numDeployments": 2,
  "solcInputHash": "6b4078d3e7901ac730f4ef0799c4f282",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"custodianAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dexs/UniswapDEX.sol\":\"UniswapDEX\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/dexs/IDEX.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IDEX {\\n\\n    function custodianAddress() external view returns (address);\\n\\n    function swap(address _tokenIn, address _tokenOut, address _recipient, uint256 _amountIn) external returns (uint256 amountOut);\\n\\n}\\n\\n\",\"keccak256\":\"0xe516fc84f1129b729bac1bb1023078e924107c74de7c8f3a3cfaeaa60739b856\",\"license\":\"Unlicense\"},\"contracts/dexs/UniswapDEX.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"./IDEX.sol\\\";\\n\\ncontract UniswapDEX is IDEX {\\n    address private swapRouterAddress;\\n\\n    // Set the pool fee to 0.3%.\\n    uint24 public constant poolFee = 3000;\\n\\n    constructor(address _swapRouterAddress) {\\n        swapRouterAddress = _swapRouterAddress;\\n    }\\n\\n    function custodianAddress() external view override returns (address) {\\n        return swapRouterAddress;\\n    }\\n\\n    function swap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _recipient,\\n        uint256 _amountIn\\n    ) external override returns (uint256 amountOut) {\\n        TransferHelper.safeTransferFrom(_tokenIn, _recipient, address(this), _amountIn);\\n        TransferHelper.safeApprove(_tokenIn, swapRouterAddress, _amountIn);\\n\\n        // Set the sqrtPriceLimitx96 to be 0 to ensure we swap our exact input amount.\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n            tokenIn : _tokenIn,\\n            tokenOut : _tokenOut,\\n            fee : poolFee,\\n            recipient : _recipient,\\n            deadline : block.timestamp,\\n            amountIn : _amountIn,\\n            amountOutMinimum : 0, // TODO : needs to be either be asked to oracle or passed as parameter\\n            sqrtPriceLimitX96 : 0\\n        });\\n\\n        // The call to `exactInputSingle` executes the swap.\\n        amountOut = ISwapRouter(swapRouterAddress).exactInputSingle(params);\\n    }\\n}\\n\",\"keccak256\":\"0x9221fe1366e1d42bac9601cad03cb971b68a9c9ceda336b8b824453dbc29fc1e\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610b57380380610b578339818101604052810190610032919061008d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100ff565b600081519050610087816100e8565b92915050565b60006020828403121561009f57600080fd5b60006100ad84828501610078565b91505092915050565b60006100c1826100c8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100f1816100b6565b81146100fc57600080fd5b50565b610a498061010e6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063089fe6aa14610046578063a66e4e5f14610064578063a9678a1814610082575b600080fd5b61004e6100b2565b60405161005b9190610895565b60405180910390f35b61006c6100b8565b60405161007991906107be565b60405180910390f35b61009c60048036038101906100979190610570565b6100e1565b6040516100a991906108b0565b60405180910390f35b610bb881565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006100ef8584308561026f565b61011a8560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846103c7565b60006040518061010001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff16815260200142815260200184815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815250905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663414bf389826040518263ffffffff1660e01b81526004016102129190610879565b602060405180830381600087803b15801561022c57600080fd5b505af1158015610240573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026491906105fc565b915050949350505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b8686866040516024016102a6939291906107d9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161031091906107a7565b6000604051808303816000865af19150503d806000811461034d576040519150601f19603f3d011682016040523d82523d6000602084013e610352565b606091505b5091509150818015610380575060008151148061037f57508080602001905181019061037e91906105d3565b5b5b6103bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b690610859565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b85856040516024016103fc929190610810565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161046691906107a7565b6000604051808303816000865af19150503d80600081146104a3576040519150601f19603f3d011682016040523d82523d6000602084013e6104a8565b606091505b50915091508180156104d657506000815114806104d55750808060200190518101906104d491906105d3565b5b5b610515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050c90610839565b60405180910390fd5b5050505050565b60008135905061052b816109ce565b92915050565b600081519050610540816109e5565b92915050565b600081359050610555816109fc565b92915050565b60008151905061056a816109fc565b92915050565b6000806000806080858703121561058657600080fd5b60006105948782880161051c565b94505060206105a58782880161051c565b93505060406105b68782880161051c565b92505060606105c787828801610546565b91505092959194509250565b6000602082840312156105e557600080fd5b60006105f384828501610531565b91505092915050565b60006020828403121561060e57600080fd5b600061061c8482850161055b565b91505092915050565b61062e816108f2565b82525050565b61063d816108f2565b82525050565b600061064e826108cb565b61065881856108d6565b9350610668818560208601610949565b80840191505092915050565b60006106816002836108e1565b915061068c8261097c565b602082019050919050565b60006106a46003836108e1565b91506106af826109a5565b602082019050919050565b610100820160008201516106d16000850182610625565b5060208201516106e46020850182610625565b5060408201516106f7604085018261076b565b50606082015161070a6060850182610625565b50608082015161071d6080850182610789565b5060a082015161073060a0850182610789565b5060c082015161074360c0850182610789565b5060e082015161075660e085018261075c565b50505050565b61076581610910565b82525050565b61077481610930565b82525050565b61078381610930565b82525050565b6107928161093f565b82525050565b6107a18161093f565b82525050565b60006107b38284610643565b915081905092915050565b60006020820190506107d36000830184610634565b92915050565b60006060820190506107ee6000830186610634565b6107fb6020830185610634565b6108086040830184610798565b949350505050565b60006040820190506108256000830185610634565b6108326020830184610798565b9392505050565b6000602082019050818103600083015261085281610674565b9050919050565b6000602082019050818103600083015261087281610697565b9050919050565b60006101008201905061088f60008301846106ba565b92915050565b60006020820190506108aa600083018461077a565b92915050565b60006020820190506108c56000830184610798565b92915050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006108fd82610910565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b60005b8381101561096757808201518184015260208101905061094c565b83811115610976576000848401525b50505050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b6109d7816108f2565b81146109e257600080fd5b50565b6109ee81610904565b81146109f957600080fd5b50565b610a058161093f565b8114610a1057600080fd5b5056fea264697066735822122066f43d4c40feb1af648a91b727cf183120e3edfc4d84dc9daefaab396b35f69964736f6c63430008010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063089fe6aa14610046578063a66e4e5f14610064578063a9678a1814610082575b600080fd5b61004e6100b2565b60405161005b9190610895565b60405180910390f35b61006c6100b8565b60405161007991906107be565b60405180910390f35b61009c60048036038101906100979190610570565b6100e1565b6040516100a991906108b0565b60405180910390f35b610bb881565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006100ef8584308561026f565b61011a8560008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846103c7565b60006040518061010001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001610bb862ffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff16815260200142815260200184815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815250905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663414bf389826040518263ffffffff1660e01b81526004016102129190610879565b602060405180830381600087803b15801561022c57600080fd5b505af1158015610240573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026491906105fc565b915050949350505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b8686866040516024016102a6939291906107d9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161031091906107a7565b6000604051808303816000865af19150503d806000811461034d576040519150601f19603f3d011682016040523d82523d6000602084013e610352565b606091505b5091509150818015610380575060008151148061037f57508080602001905181019061037e91906105d3565b5b5b6103bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b690610859565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b85856040516024016103fc929190610810565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161046691906107a7565b6000604051808303816000865af19150503d80600081146104a3576040519150601f19603f3d011682016040523d82523d6000602084013e6104a8565b606091505b50915091508180156104d657506000815114806104d55750808060200190518101906104d491906105d3565b5b5b610515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050c90610839565b60405180910390fd5b5050505050565b60008135905061052b816109ce565b92915050565b600081519050610540816109e5565b92915050565b600081359050610555816109fc565b92915050565b60008151905061056a816109fc565b92915050565b6000806000806080858703121561058657600080fd5b60006105948782880161051c565b94505060206105a58782880161051c565b93505060406105b68782880161051c565b92505060606105c787828801610546565b91505092959194509250565b6000602082840312156105e557600080fd5b60006105f384828501610531565b91505092915050565b60006020828403121561060e57600080fd5b600061061c8482850161055b565b91505092915050565b61062e816108f2565b82525050565b61063d816108f2565b82525050565b600061064e826108cb565b61065881856108d6565b9350610668818560208601610949565b80840191505092915050565b60006106816002836108e1565b915061068c8261097c565b602082019050919050565b60006106a46003836108e1565b91506106af826109a5565b602082019050919050565b610100820160008201516106d16000850182610625565b5060208201516106e46020850182610625565b5060408201516106f7604085018261076b565b50606082015161070a6060850182610625565b50608082015161071d6080850182610789565b5060a082015161073060a0850182610789565b5060c082015161074360c0850182610789565b5060e082015161075660e085018261075c565b50505050565b61076581610910565b82525050565b61077481610930565b82525050565b61078381610930565b82525050565b6107928161093f565b82525050565b6107a18161093f565b82525050565b60006107b38284610643565b915081905092915050565b60006020820190506107d36000830184610634565b92915050565b60006060820190506107ee6000830186610634565b6107fb6020830185610634565b6108086040830184610798565b949350505050565b60006040820190506108256000830185610634565b6108326020830184610798565b9392505050565b6000602082019050818103600083015261085281610674565b9050919050565b6000602082019050818103600083015261087281610697565b9050919050565b60006101008201905061088f60008301846106ba565b92915050565b60006020820190506108aa600083018461077a565b92915050565b60006020820190506108c56000830184610798565b92915050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006108fd82610910565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b60005b8381101561096757808201518184015260208101905061094c565b83811115610976576000848401525b50505050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b6109d7816108f2565b81146109e257600080fd5b50565b6109ee81610904565b81146109f957600080fd5b50565b610a058161093f565b8114610a1057600080fd5b5056fea264697066735822122066f43d4c40feb1af648a91b727cf183120e3edfc4d84dc9daefaab396b35f69964736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 548,
        "contract": "contracts/dexs/UniswapDEX.sol:UniswapDEX",
        "label": "swapRouterAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}