{
  "address": "0xC5AACb17160019a7Bdd8D0c4922d50f41DbFd9d3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_anyswapRouterAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_dexAddresses",
          "type": "address[]"
        },
        {
          "internalType": "enum Router.dexCode[]",
          "name": "_dexCodes",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dstCrossToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dstToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_crossAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toChainId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_dstDEX",
          "type": "uint8"
        }
      ],
      "name": "finalizeTokenCross",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_srcToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_srcCrossToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dstCrossToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dstToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_srcAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toChainId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_bridge",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_srcDEX",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_dstDEX",
          "type": "uint8"
        }
      ],
      "name": "initTokensCross",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "retrieve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcdc4ffa2e12066ffe818493851093fc725b850de4ea9f5c7c4a63c3e6e0bf311",
  "receipt": {
    "to": null,
    "from": "0x335e2912D888F76326e806C666B690Df2D886D07",
    "contractAddress": "0xC5AACb17160019a7Bdd8D0c4922d50f41DbFd9d3",
    "transactionIndex": 49,
    "gasUsed": "762723",
    "logsBloom": "0x
    "blockHash": "0x01bb4e9e4f23fe3b54dfd36bd996494a1219d5b97a5a784193555e1c94424d92",
    "transactionHash": "0xcdc4ffa2e12066ffe818493851093fc725b850de4ea9f5c7c4a63c3e6e0bf311",
    "logs": [
      {
        "transactionIndex": 49,
        "blockNumber": 26427021,
        "transactionHash": "0xcdc4ffa2e12066ffe818493851093fc725b850de4ea9f5c7c4a63c3e6e0bf311",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000335e2912d888f76326e806c666b690df2d886d07",
          "0x00000000000000000000000040314efbc35bc0db441969bce451bf0167efded1"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000061c7337cd21ee4000000000000000000000000000000000000000000000000337ad0b2b98a45f400000000000000000000000000000000000000000000052cb2c7c63fc200d51c0000000000000000000000000000000000000000000000003319097f3cb8271000000000000000000000000000000000000000000000052cb3298d733ed2f400",
        "logIndex": 200,
        "blockHash": "0x01bb4e9e4f23fe3b54dfd36bd996494a1219d5b97a5a784193555e1c94424d92"
      }
    ],
    "blockNumber": 26427021,
    "cumulativeGasUsed": "7237644",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4f3aff3a747fcade12598081e80c6605a8be192f",
    [
      "0xC2038d36865F2cFeA3be713946E7E13B296Aadf3"
    ],
    [
      0
    ]
  ],
  "numDeployments": 22,
  "solcInputHash": "0f967e7175381b5e3f35de02aa17ebee",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_anyswapRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_dexAddresses\",\"type\":\"address[]\"},{\"internalType\":\"enum Router.dexCode[]\",\"name\":\"_dexCodes\",\"type\":\"uint8[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dstCrossToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_crossAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_dstDEX\",\"type\":\"uint8\"}],\"name\":\"finalizeTokenCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_srcCrossToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dstCrossToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dstToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_bridge\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_srcDEX\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_dstDEX\",\"type\":\"uint8\"}],\"name\":\"initTokensCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"retrieve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_anyswapRouterAddress\":\"Address of the default bridge\",\"_dexAddresses\":\"Array of DEX addresses\",\"_dexCodes\":\"Array of DEX identifiers\"}},\"initTokensCross(address,address,address,address,uint256,uint256,uint8,uint8,uint8)\":{\"details\":\"This function is executed on the origin chain\",\"params\":{\"_dstCrossToken\":\"Address of the token that will arrive to the destination chain\",\"_dstDEX\":\"Identifier of the exchange to use on the destination chain\",\"_dstToken\":\"Address of the token the user wants to receive on destination\",\"_srcAmount\":\"Amount of source tokens that user wants to move\",\"_srcCrossToken\":\"Address of the token we will swap on origin chain to send to the bridge\",\"_srcDEX\":\"Identifier of the exchange to use on the origin chain\",\"_srcToken\":\"Address of the token the user wants to swidge\",\"_toChainId\":\"Chain identifier that the user wants its token to receive\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"finalizeTokenCross(address,address,address,uint256,uint256,uint8)\":{\"notice\":\"Finalize the process of swidging\"},\"initTokensCross(address,address,address,address,uint256,uint256,uint8,uint8,uint8)\":{\"notice\":\"Init the process of swidging\"},\"retrieve(address,uint256)\":{\"notice\":\"To retrieve any tokens that got stuck on the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Router.sol\":\"Router\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Router.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"./dexs/IDEX.sol\\\";\\nimport \\\"./dexs/Uniswap.sol\\\";\\n\\ninterface AnyswapRouter {\\n    function anySwapOutUnderlying(address token, address to, uint amount, uint toChainID) external;\\n}\\n\\ncontract Router {\\n    AnyswapRouter private bridge;\\n    mapping(uint8 => IDEX) private swapProviders;\\n\\n    enum dexCode {\\n        Uniswap, // 0\\n        Sushiswap // 1\\n        // ...\\n    }\\n\\n    /// @param _anyswapRouterAddress Address of the default bridge\\n    /// @param _dexAddresses Array of DEX addresses\\n    /// @param _dexCodes Array of DEX identifiers\\n    constructor(address _anyswapRouterAddress, address[] memory _dexAddresses, dexCode[] memory _dexCodes) {\\n        initializeBridge(_anyswapRouterAddress);\\n        initializeDEXs(_dexAddresses, _dexCodes);\\n    }\\n\\n    /// Initialize bridge address\\n    /// @dev _anyswapRouterAddress Address of AnyswapRouter contract\\n    function initializeBridge(address _anyswapRouterAddress) internal {\\n        bridge = AnyswapRouter(_anyswapRouterAddress);\\n    }\\n\\n    /// Initialize the mapping of DEX's that router has available in its network\\n    /// @dev codes and addresses need to be same length, otherwise we fail\\n    /// @param _dexAddresses Array of DEX addresses\\n    /// @param _dexCodes Array of DEX identifiers\\n    function initializeDEXs(address[] memory _dexAddresses, dexCode[] memory _dexCodes) private {\\n        require(_dexAddresses.length == _dexCodes.length, \\\"Addresses count cannot mismatch codes count.\\\");\\n        require(_dexAddresses.length != 0, \\\"No swap providers informed.\\\");\\n        for (uint8 i = 0; i < _dexAddresses.length; i++) {\\n            IDEX provider = IDEX(_dexAddresses[i]);\\n            swapProviders[uint8(_dexCodes[i])] = provider;\\n        }\\n    }\\n\\n    /// Init the process of swidging\\n    /// @dev This function is executed on the origin chain\\n    /// @param _srcToken Address of the token the user wants to swidge\\n    /// @param _srcCrossToken Address of the token we will swap on origin chain to send to the bridge\\n    /// @param _dstCrossToken Address of the token that will arrive to the destination chain\\n    /// @param _dstToken Address of the token the user wants to receive on destination\\n    /// @param _srcAmount Amount of source tokens that user wants to move\\n    /// @param _toChainId Chain identifier that the user wants its token to receive\\n    /// @param _srcDEX Identifier of the exchange to use on the origin chain\\n    /// @param _dstDEX Identifier of the exchange to use on the destination chain\\n    function initTokensCross(\\n        address _srcToken,\\n        address _srcCrossToken,\\n        address _dstCrossToken,\\n        address _dstToken,\\n        uint256 _srcAmount,\\n        uint256 _toChainId,\\n        uint8 _bridge,\\n        uint8 _srcDEX,\\n        uint8 _dstDEX\\n    ) external {\\n        TransferHelper.safeTransferFrom(_srcToken, msg.sender, address(this), _srcAmount);\\n\\n        IDEX swapProvider = swapProviders[_srcDEX];\\n\\n        TransferHelper.safeApprove(_srcToken, address(swapProvider), _srcAmount);\\n\\n        uint256 amountOut = swapProvider.swap(_srcToken, _srcCrossToken, address(this), _srcAmount);\\n\\n        // Transfer `dstToken` to the user\\n        TransferHelper.safeTransfer(_srcCrossToken, msg.sender, amountOut);\\n    }\\n\\n    /// Finalize the process of swidging\\n    function finalizeTokenCross(address _dstCrossToken, address _dstToken, address _to, uint256 _crossAmount, uint256 _toChainId, uint8 _dstDEX) external {\\n\\n    }\\n\\n    /// To retrieve any tokens that got stuck on the contract\\n    function retrieve(address _token, uint256 _amount) external {\\n        TransferHelper.safeTransfer(_token, msg.sender, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xd8421edf76fb69b8f119f9245123440bfe9be67709f0fa37180e22f4d0844152\",\"license\":\"MIT\"},\"contracts/dexs/IDEX.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IDEX {\\n\\n    function custodianAddress() external view returns (address);\\n\\n    function swap(address _tokenIn, address _tokenOut, address _recipient, uint256 _amountIn) external returns (uint256 amountOut);\\n\\n}\\n\\n\",\"keccak256\":\"0xe516fc84f1129b729bac1bb1023078e924107c74de7c8f3a3cfaeaa60739b856\",\"license\":\"Unlicense\"},\"contracts/dexs/Uniswap.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"./IDEX.sol\\\";\\n\\ncontract Uniswap is IDEX {\\n    address private swapRouterAddress;\\n\\n    // Set the pool fee to 0.3%.\\n    uint24 public constant poolFee = 3000;\\n\\n    constructor(address _swapRouterAddress) {\\n        swapRouterAddress = _swapRouterAddress;\\n    }\\n\\n    function custodianAddress() external view override returns (address) {\\n        return swapRouterAddress;\\n    }\\n\\n    function swap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _recipient,\\n        uint256 _amountIn\\n    ) external override returns (uint256 amountOut) {\\n        TransferHelper.safeTransferFrom(_tokenIn, _recipient, address(this), _amountIn);\\n        TransferHelper.safeApprove(_tokenIn, swapRouterAddress, _amountIn);\\n\\n        // Set the sqrtPriceLimitx96 to be 0 to ensure we swap our exact input amount.\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n            tokenIn : _tokenIn,\\n            tokenOut : _tokenOut,\\n            fee : poolFee,\\n            recipient : _recipient,\\n            deadline : block.timestamp,\\n            amountIn : _amountIn,\\n            amountOutMinimum : 0, // TODO : needs to be either be asked to oracle or passed as parameter\\n            sqrtPriceLimitX96 : 0\\n        });\\n\\n        // The call to `exactInputSingle` executes the swap.\\n        amountOut = ISwapRouter(swapRouterAddress).exactInputSingle(params);\\n    }\\n}\\n\",\"keccak256\":\"0xcd87f86305aa38fef08bc2e837c7da36358dc5d00a522793779e3c0c0f52f39e\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620012f6380380620012f68339818101604052810190620000379190620003f1565b62000048836200006360201b60201c565b6200005a8282620000a660201b60201c565b5050506200075b565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b8051825114620000ed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000e490620004e9565b60405180910390fd5b60008251141562000135576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200012c90620004c7565b60405180910390fd5b60005b82518160ff1610156200027a576000838260ff168151811062000184577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190508060016000858560ff1681518110620001d0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151600181111562000211577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60ff1660ff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050808062000271906200061a565b91505062000138565b505050565b600062000296620002908462000534565b6200050b565b90508083825260208201905082856020860282011115620002b657600080fd5b60005b85811015620002ea5781620002cf888262000369565b845260208401935060208301925050600181019050620002b9565b5050509392505050565b60006200030b620003058462000563565b6200050b565b905080838252602082019050828560208602820111156200032b57600080fd5b60005b858110156200035f5781620003448882620003da565b8452602084019350602083019250506001810190506200032e565b5050509392505050565b6000815190506200037a8162000730565b92915050565b600082601f8301126200039257600080fd5b8151620003a48482602086016200027f565b91505092915050565b600082601f830112620003bf57600080fd5b8151620003d1848260208601620002f4565b91505092915050565b600081519050620003eb816200074a565b92915050565b6000806000606084860312156200040757600080fd5b6000620004178682870162000369565b935050602084015167ffffffffffffffff8111156200043557600080fd5b620004438682870162000380565b925050604084015167ffffffffffffffff8111156200046157600080fd5b6200046f86828701620003ad565b9150509250925092565b600062000488601b8362000592565b91506200049582620006b8565b602082019050919050565b6000620004af602c8362000592565b9150620004bc82620006e1565b604082019050919050565b60006020820190508181036000830152620004e28162000479565b9050919050565b600060208201905081810360008301526200050481620004a0565b9050919050565b6000620005176200052a565b9050620005258282620005e4565b919050565b6000604051905090565b600067ffffffffffffffff82111562000552576200055162000678565b5b602082029050602081019050919050565b600067ffffffffffffffff82111562000581576200058062000678565b5b602082029050602081019050919050565b600082825260208201905092915050565b6000620005b082620005b7565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060ff82169050919050565b620005ef82620006a7565b810181811067ffffffffffffffff8211171562000611576200061062000678565b5b80604052505050565b60006200062782620005d7565b915060ff8214156200063e576200063d62000649565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4e6f20737761702070726f76696465727320696e666f726d65642e0000000000600082015250565b7f41646472657373657320636f756e742063616e6e6f74206d69736d617463682060008201527f636f64657320636f756e742e0000000000000000000000000000000000000000602082015250565b6200073b81620005a3565b81146200074757600080fd5b50565b600281106200075857600080fd5b50565b610b8b806200076b6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80634864177b14610046578063c3a2a66514610062578063ec52d2341461007e575b600080fd5b610060600480360381019061005b919061061e565b61009a565b005b61007c6004803603810190610077919061076d565b61019c565b005b610098600480360381019061009391906106e4565b6101ab565b005b6100a6893330886101b3565b6000600160008460ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506100ef8a828861030b565b60008173ffffffffffffffffffffffffffffffffffffffff1663a9678a188c8c308b6040518563ffffffff1660e01b815260040161013094939291906108ca565b602060405180830381600087803b15801561014a57600080fd5b505af115801561015e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018291906107d2565b905061018f8a3383610460565b5050505050505050505050565b6101a7823383610460565b5050565b505050505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b8686866040516024016101ea9392919061090f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161025491906108b3565b6000604051808303816000865af19150503d8060008114610291576040519150601f19603f3d011682016040523d82523d6000602084013e610296565b606091505b50915091508180156102c457506000815114806102c35750808060200190518101906102c291906107a9565b5b5b610303576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fa906109af565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b8585604051602401610340929190610946565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516103aa91906108b3565b6000604051808303816000865af19150503d80600081146103e7576040519150601f19603f3d011682016040523d82523d6000602084013e6103ec565b606091505b509150915081801561041a575060008151148061041957508080602001905181019061041891906107a9565b5b5b610459576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104509061096f565b60405180910390fd5b5050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8585604051602401610495929190610946565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516104ff91906108b3565b6000604051808303816000865af19150503d806000811461053c576040519150601f19603f3d011682016040523d82523d6000602084013e610541565b606091505b509150915081801561056f575060008151148061056e57508080602001905181019061056d91906107a9565b5b5b6105ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a59061098f565b60405180910390fd5b5050505050565b6000813590506105c481610af9565b92915050565b6000815190506105d981610b10565b92915050565b6000813590506105ee81610b27565b92915050565b60008151905061060381610b27565b92915050565b60008135905061061881610b3e565b92915050565b60008060008060008060008060006101208a8c03121561063d57600080fd5b600061064b8c828d016105b5565b995050602061065c8c828d016105b5565b985050604061066d8c828d016105b5565b975050606061067e8c828d016105b5565b965050608061068f8c828d016105df565b95505060a06106a08c828d016105df565b94505060c06106b18c828d01610609565b93505060e06106c28c828d01610609565b9250506101006106d48c828d01610609565b9150509295985092959850929598565b60008060008060008060c087890312156106fd57600080fd5b600061070b89828a016105b5565b965050602061071c89828a016105b5565b955050604061072d89828a016105b5565b945050606061073e89828a016105df565b935050608061074f89828a016105df565b92505060a061076089828a01610609565b9150509295509295509295565b6000806040838503121561078057600080fd5b600061078e858286016105b5565b925050602061079f858286016105df565b9150509250929050565b6000602082840312156107bb57600080fd5b60006107c9848285016105ca565b91505092915050565b6000602082840312156107e457600080fd5b60006107f2848285016105f4565b91505092915050565b610804816109f6565b82525050565b6000610815826109cf565b61081f81856109da565b935061082f818560208601610a4b565b80840191505092915050565b60006108486002836109e5565b915061085382610a7e565b602082019050919050565b600061086b6002836109e5565b915061087682610aa7565b602082019050919050565b600061088e6003836109e5565b915061089982610ad0565b602082019050919050565b6108ad81610a34565b82525050565b60006108bf828461080a565b915081905092915050565b60006080820190506108df60008301876107fb565b6108ec60208301866107fb565b6108f960408301856107fb565b61090660608301846108a4565b95945050505050565b600060608201905061092460008301866107fb565b61093160208301856107fb565b61093e60408301846108a4565b949350505050565b600060408201905061095b60008301856107fb565b61096860208301846108a4565b9392505050565b600060208201905081810360008301526109888161083b565b9050919050565b600060208201905081810360008301526109a88161085e565b9050919050565b600060208201905081810360008301526109c881610881565b9050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610a0182610a14565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015610a69578082015181840152602081019050610a4e565b83811115610a78576000848401525b50505050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b610b02816109f6565b8114610b0d57600080fd5b50565b610b1981610a08565b8114610b2457600080fd5b50565b610b3081610a34565b8114610b3b57600080fd5b50565b610b4781610a3e565b8114610b5257600080fd5b5056fea2646970667358221220f0e6257c7f4c317f4ac337608a17c903bf8d1b6bf34269828295a7d39f3cf6d364736f6c63430008010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80634864177b14610046578063c3a2a66514610062578063ec52d2341461007e575b600080fd5b610060600480360381019061005b919061061e565b61009a565b005b61007c6004803603810190610077919061076d565b61019c565b005b610098600480360381019061009391906106e4565b6101ab565b005b6100a6893330886101b3565b6000600160008460ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506100ef8a828861030b565b60008173ffffffffffffffffffffffffffffffffffffffff1663a9678a188c8c308b6040518563ffffffff1660e01b815260040161013094939291906108ca565b602060405180830381600087803b15801561014a57600080fd5b505af115801561015e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018291906107d2565b905061018f8a3383610460565b5050505050505050505050565b6101a7823383610460565b5050565b505050505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b8686866040516024016101ea9392919061090f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161025491906108b3565b6000604051808303816000865af19150503d8060008114610291576040519150601f19603f3d011682016040523d82523d6000602084013e610296565b606091505b50915091508180156102c457506000815114806102c35750808060200190518101906102c291906107a9565b5b5b610303576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fa906109af565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b8585604051602401610340929190610946565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516103aa91906108b3565b6000604051808303816000865af19150503d80600081146103e7576040519150601f19603f3d011682016040523d82523d6000602084013e6103ec565b606091505b509150915081801561041a575060008151148061041957508080602001905181019061041891906107a9565b5b5b610459576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104509061096f565b60405180910390fd5b5050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8585604051602401610495929190610946565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516104ff91906108b3565b6000604051808303816000865af19150503d806000811461053c576040519150601f19603f3d011682016040523d82523d6000602084013e610541565b606091505b509150915081801561056f575060008151148061056e57508080602001905181019061056d91906107a9565b5b5b6105ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a59061098f565b60405180910390fd5b5050505050565b6000813590506105c481610af9565b92915050565b6000815190506105d981610b10565b92915050565b6000813590506105ee81610b27565b92915050565b60008151905061060381610b27565b92915050565b60008135905061061881610b3e565b92915050565b60008060008060008060008060006101208a8c03121561063d57600080fd5b600061064b8c828d016105b5565b995050602061065c8c828d016105b5565b985050604061066d8c828d016105b5565b975050606061067e8c828d016105b5565b965050608061068f8c828d016105df565b95505060a06106a08c828d016105df565b94505060c06106b18c828d01610609565b93505060e06106c28c828d01610609565b9250506101006106d48c828d01610609565b9150509295985092959850929598565b60008060008060008060c087890312156106fd57600080fd5b600061070b89828a016105b5565b965050602061071c89828a016105b5565b955050604061072d89828a016105b5565b945050606061073e89828a016105df565b935050608061074f89828a016105df565b92505060a061076089828a01610609565b9150509295509295509295565b6000806040838503121561078057600080fd5b600061078e858286016105b5565b925050602061079f858286016105df565b9150509250929050565b6000602082840312156107bb57600080fd5b60006107c9848285016105ca565b91505092915050565b6000602082840312156107e457600080fd5b60006107f2848285016105f4565b91505092915050565b610804816109f6565b82525050565b6000610815826109cf565b61081f81856109da565b935061082f818560208601610a4b565b80840191505092915050565b60006108486002836109e5565b915061085382610a7e565b602082019050919050565b600061086b6002836109e5565b915061087682610aa7565b602082019050919050565b600061088e6003836109e5565b915061089982610ad0565b602082019050919050565b6108ad81610a34565b82525050565b60006108bf828461080a565b915081905092915050565b60006080820190506108df60008301876107fb565b6108ec60208301866107fb565b6108f960408301856107fb565b61090660608301846108a4565b95945050505050565b600060608201905061092460008301866107fb565b61093160208301856107fb565b61093e60408301846108a4565b949350505050565b600060408201905061095b60008301856107fb565b61096860208301846108a4565b9392505050565b600060208201905081810360008301526109888161083b565b9050919050565b600060208201905081810360008301526109a88161085e565b9050919050565b600060208201905081810360008301526109c881610881565b9050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610a0182610a14565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015610a69578082015181840152602081019050610a4e565b83811115610a78576000848401525b50505050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b610b02816109f6565b8114610b0d57600080fd5b50565b610b1981610a08565b8114610b2457600080fd5b50565b610b3081610a34565b8114610b3b57600080fd5b50565b610b4781610a3e565b8114610b5257600080fd5b5056fea2646970667358221220f0e6257c7f4c317f4ac337608a17c903bf8d1b6bf34269828295a7d39f3cf6d364736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_anyswapRouterAddress": "Address of the default bridge",
          "_dexAddresses": "Array of DEX addresses",
          "_dexCodes": "Array of DEX identifiers"
        }
      },
      "initTokensCross(address,address,address,address,uint256,uint256,uint8,uint8,uint8)": {
        "details": "This function is executed on the origin chain",
        "params": {
          "_dstCrossToken": "Address of the token that will arrive to the destination chain",
          "_dstDEX": "Identifier of the exchange to use on the destination chain",
          "_dstToken": "Address of the token the user wants to receive on destination",
          "_srcAmount": "Amount of source tokens that user wants to move",
          "_srcCrossToken": "Address of the token we will swap on origin chain to send to the bridge",
          "_srcDEX": "Identifier of the exchange to use on the origin chain",
          "_srcToken": "Address of the token the user wants to swidge",
          "_toChainId": "Chain identifier that the user wants its token to receive"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "finalizeTokenCross(address,address,address,uint256,uint256,uint8)": {
        "notice": "Finalize the process of swidging"
      },
      "initTokensCross(address,address,address,address,uint256,uint256,uint8,uint8,uint8)": {
        "notice": "Init the process of swidging"
      },
      "retrieve(address,uint256)": {
        "notice": "To retrieve any tokens that got stuck on the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 383,
        "contract": "contracts/Router.sol:Router",
        "label": "bridge",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AnyswapRouter)380"
      },
      {
        "astId": 388,
        "contract": "contracts/Router.sol:Router",
        "label": "swapProviders",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint8,t_contract(IDEX)622)"
      }
    ],
    "types": {
      "t_contract(AnyswapRouter)380": {
        "encoding": "inplace",
        "label": "contract AnyswapRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IDEX)622": {
        "encoding": "inplace",
        "label": "contract IDEX",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint8,t_contract(IDEX)622)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => contract IDEX)",
        "numberOfBytes": "32",
        "value": "t_contract(IDEX)622"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}