{
  "address": "0x08aEBd8C3097C78e135CF76AC27A0e717c069d2d",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "txUuid",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "CrossFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "txUuid",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "CrossInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "txUuid",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "SwapExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "code",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provAddress",
          "type": "address"
        }
      ],
      "name": "UpdatedBridgeProvider",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "UpdatedRelayer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "code",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provAddress",
          "type": "address"
        }
      ],
      "name": "UpdatedSwapProvider",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "providerCode",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "bool",
              "name": "required",
              "type": "bool"
            }
          ],
          "internalType": "struct Router.SwapData",
          "name": "_swapData",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_txUuid",
          "type": "bytes"
        }
      ],
      "name": "finalizeTokenCross",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "providerCode",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "bool",
              "name": "required",
              "type": "bool"
            }
          ],
          "internalType": "struct Router.SwapData",
          "name": "_swapData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "toChainId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "bool",
              "name": "required",
              "type": "bool"
            }
          ],
          "internalType": "struct Router.BridgeData",
          "name": "_bridgeData",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_txUuid",
          "type": "bytes"
        }
      ],
      "name": "initTokensCross",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "retrieve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Router.bridgeCode",
          "name": "_code",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "updateBridgeProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relayerAddress",
          "type": "address"
        }
      ],
      "name": "updateRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Router.dexCode",
          "name": "_code",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "updateSwapProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb24c4d4e7c93aefb2e4d5c6f253ef24b6071681d82658d2a0388bf67ce14cb0b",
  "receipt": {
    "to": null,
    "from": "0x7228ebf7C311e82867F08Ad6Dd3FCfbC2adB41A9",
    "contractAddress": "0x08aEBd8C3097C78e135CF76AC27A0e717c069d2d",
    "transactionIndex": 46,
    "gasUsed": "1743549",
    "logsBloom": "0x
    "blockHash": "0x82f8e3063d6ef64ecd03a2bd7918c10c6e5f1e67cf57126d71032a2228aa0220",
    "transactionHash": "0xb24c4d4e7c93aefb2e4d5c6f253ef24b6071681d82658d2a0388bf67ce14cb0b",
    "logs": [
      {
        "transactionIndex": 46,
        "blockNumber": 27715967,
        "transactionHash": "0xb24c4d4e7c93aefb2e4d5c6f253ef24b6071681d82658d2a0388bf67ce14cb0b",
        "address": "0x08aEBd8C3097C78e135CF76AC27A0e717c069d2d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007228ebf7c311e82867f08ad6dd3fcfbc2adb41a9"
        ],
        "data": "0x",
        "logIndex": 176,
        "blockHash": "0x82f8e3063d6ef64ecd03a2bd7918c10c6e5f1e67cf57126d71032a2228aa0220"
      },
      {
        "transactionIndex": 46,
        "blockNumber": 27715967,
        "transactionHash": "0xb24c4d4e7c93aefb2e4d5c6f253ef24b6071681d82658d2a0388bf67ce14cb0b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007228ebf7c311e82867f08ad6dd3fcfbc2adb41a9",
          "0x000000000000000000000000e7e2cb8c81c10ff191a73fe266788c9ce62ec754"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000f8dae8012aef2500000000000000000000000000000000000000000000000018fa5b624e7f8168000000000000000000000000000000000000000000000230eb0cfee7131b93a00000000000000000000000000000000000000000000000001801807a4d549243000000000000000000000000000000000000000000000230ec05d9cf144682c5",
        "logIndex": 177,
        "blockHash": "0x82f8e3063d6ef64ecd03a2bd7918c10c6e5f1e67cf57126d71032a2228aa0220"
      }
    ],
    "blockNumber": 27715967,
    "cumulativeGasUsed": "9061940",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "62b2119cdd6cc5a25e657401162b2e2b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"txUuid\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"CrossFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"txUuid\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"CrossInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"txUuid\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"SwapExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"code\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provAddress\",\"type\":\"address\"}],\"name\":\"UpdatedBridgeProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UpdatedRelayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"code\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provAddress\",\"type\":\"address\"}],\"name\":\"UpdatedSwapProvider\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"providerCode\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"required\",\"type\":\"bool\"}],\"internalType\":\"struct Router.SwapData\",\"name\":\"_swapData\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_txUuid\",\"type\":\"bytes\"}],\"name\":\"finalizeTokenCross\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"providerCode\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"required\",\"type\":\"bool\"}],\"internalType\":\"struct Router.SwapData\",\"name\":\"_swapData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"required\",\"type\":\"bool\"}],\"internalType\":\"struct Router.BridgeData\",\"name\":\"_bridgeData\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_txUuid\",\"type\":\"bytes\"}],\"name\":\"initTokensCross\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"retrieve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Router.bridgeCode\",\"name\":\"_code\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateBridgeProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayerAddress\",\"type\":\"address\"}],\"name\":\"updateRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Router.dexCode\",\"name\":\"_code\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"updateSwapProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"CrossFinalized(bytes,uint256)\":{\"details\":\"Emitted when a multi-chain swap is finalized\"},\"CrossInitiated(bytes,uint256)\":{\"details\":\"Emitted when a multi-chain swap is initiated\"},\"SwapExecuted(bytes,uint256)\":{\"details\":\"Emitted when a single-chain swap is completed\"},\"UpdatedBridgeProvider(uint8,address)\":{\"details\":\"Emitted when a bridge provider address is updated\"},\"UpdatedRelayer(address,address)\":{\"details\":\"Emitted when the relayer address is updated\"},\"UpdatedSwapProvider(uint8,address)\":{\"details\":\"Emitted when a swap provider address is updated\"}},\"kind\":\"dev\",\"methods\":{\"finalizeTokenCross(uint256,address,(uint8,address,address,bytes,bool),bytes)\":{\"details\":\"This function is executed on the destination chain\"},\"initTokensCross(uint256,(uint8,address,address,bytes,bool),(address,uint256,bytes,bool),bytes)\":{\"details\":\"This function is executed on the origin chain\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateBridgeProvider(uint8,address)\":{\"details\":\"Updates the address of a bridge provider contract\"},\"updateRelayer(address)\":{\"details\":\"Updates the address of the authorized relayer\"},\"updateSwapProvider(uint8,address)\":{\"details\":\"Updates the address of a swap provider contract\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"finalizeTokenCross(uint256,address,(uint8,address,address,bytes,bool),bytes)\":{\"notice\":\"Finalize the process of swidging\"},\"initTokensCross(uint256,(uint8,address,address,bytes,bool),(address,uint256,bytes,bool),bytes)\":{\"notice\":\"Init the process of swidging\"},\"retrieve(address,uint256)\":{\"notice\":\"To retrieve any tokens that got stuck on the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Router.sol\":\"Router\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Provider.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\n\\nabstract contract Provider is Ownable {\\n    address private router;\\n\\n    modifier onlyRouter() {\\n        require(msg.sender == router, \\\"Unauthorized caller\\\");\\n        _;\\n    }\\n\\n    event UpdatedRouter(address indexed routerAddress);\\n\\n    function updateRouter(address _routerAddress) external onlyOwner {\\n        router = _routerAddress;\\n        emit UpdatedRouter(_routerAddress);\\n    }\\n\\n    function retrieve(address _token, uint256 _amount) external onlyOwner {\\n        TransferHelper.safeTransfer(_token, msg.sender, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xad3d682037351375ca4ca43c7f72d0bc2ccf46ece52d63983d2d08d12e4e9a5e\",\"license\":\"MIT\"},\"contracts/Router.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"./dexs/IDEX.sol\\\";\\nimport \\\"./bridge/IBridge.sol\\\";\\n\\ncontract Router is Ownable {\\n    address private relayerAddress;\\n    mapping(uint8 => IBridge) private bridgeProviders;\\n    mapping(uint8 => IDEX) private swapProviders;\\n\\n    enum dexCode {\\n        Uniswap, // 0\\n        ZeroEx // 1\\n    }\\n\\n    enum bridgeCode {\\n        Anyswap // 0\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the relayer.\\n     */\\n    modifier onlyRelayer() {\\n        require(relayerAddress == _msgSender(), \\\"Caller is not the relayer\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Updates the address of a bridge provider contract\\n     */\\n    function updateBridgeProvider(bridgeCode _code, address _address) external onlyOwner {\\n        uint8 code = uint8(_code);\\n        bridgeProviders[code] = IBridge(_address);\\n        emit UpdatedBridgeProvider(code, _address);\\n    }\\n\\n    /**\\n     * @dev Updates the address of a swap provider contract\\n     */\\n    function updateSwapProvider(dexCode _code, address _address) external onlyOwner {\\n        uint8 code = uint8(_code);\\n        swapProviders[code] = IDEX(_address);\\n        emit UpdatedSwapProvider(code, _address);\\n    }\\n\\n    /**\\n     * @dev Updates the address of the authorized relayer\\n     */\\n    function updateRelayer(address _relayerAddress) external onlyOwner {\\n        address oldAddress = relayerAddress;\\n        relayerAddress = _relayerAddress;\\n        emit UpdatedRelayer(oldAddress, relayerAddress);\\n    }\\n\\n    /**\\n     * @dev Emitted when a bridge provider address is updated\\n     */\\n    event UpdatedBridgeProvider(\\n        uint8 code,\\n        address provAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a swap provider address is updated\\n     */\\n    event UpdatedSwapProvider(\\n        uint8 code,\\n        address provAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the relayer address is updated\\n     */\\n    event UpdatedRelayer(\\n        address oldAddress,\\n        address newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a multi-chain swap is initiated\\n     */\\n    event CrossInitiated(\\n        bytes txUuid,\\n        uint256 amountOut\\n    );\\n\\n    /**\\n     * @dev Emitted when a multi-chain swap is finalized\\n     */\\n    event CrossFinalized(\\n        bytes txUuid,\\n        uint256 amountOut\\n    );\\n\\n    /**\\n     * @dev Emitted when a single-chain swap is completed\\n     */\\n    event SwapExecuted(\\n        bytes txUuid,\\n        uint256 amountOut\\n    );\\n\\n    /**\\n     * @dev Defines the details for the swap step\\n     */\\n    struct SwapData {\\n        uint8 providerCode;\\n        address tokenIn;\\n        address tokenOut;\\n        bytes data;\\n        bool required;\\n    }\\n\\n    /**\\n     * @dev Defines the details for the bridge step\\n     */\\n    struct BridgeData {\\n        address tokenIn;\\n        uint256 toChainId;\\n        bytes data;\\n        bool required;\\n    }\\n\\n    /**\\n     * Init the process of swidging\\n     * @dev This function is executed on the origin chain\\n     */\\n    function initTokensCross(\\n        uint256 _amount,\\n        SwapData calldata _swapData,\\n        BridgeData calldata _bridgeData,\\n        bytes calldata _txUuid\\n    ) external payable {\\n        // We need either the swap or the bridge step to be required\\n        require(_swapData.required || _bridgeData.required, \\\"No required actions\\\");\\n\\n        address tokenToTakeIn;\\n        // Need to check which token is going to be taken as input\\n        if (_swapData.required) {\\n            tokenToTakeIn = _swapData.tokenIn;\\n        }\\n        else {\\n            tokenToTakeIn = _bridgeData.tokenIn;\\n        }\\n\\n        // Take ownership of user's tokens\\n        TransferHelper.safeTransferFrom(\\n            tokenToTakeIn,\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n\\n        uint256 finalAmount;\\n        // Store the amount for the next step\\n        // depending on the step to take\\n        if (_swapData.required) {\\n            IDEX swapper = swapProviders[_swapData.providerCode];\\n\\n            // Approve swapper contract\\n            TransferHelper.safeApprove(\\n                _swapData.tokenIn,\\n                address(swapper),\\n                _amount\\n            );\\n\\n            // Execute the swap\\n            finalAmount = swapper.swap{value : msg.value}(\\n                _swapData.tokenIn,\\n                _swapData.tokenOut,\\n                address(this),\\n                _amount,\\n                _swapData.data\\n            );\\n        }\\n        else {\\n            // If swap is not required the amount going\\n            // to the bridge is the same that came in\\n            finalAmount = _amount;\\n        }\\n\\n        if (_bridgeData.required) {\\n            // Load selected bridge provider\\n            IBridge bridge = bridgeProviders[uint8(bridgeCode.Anyswap)];\\n\\n            // Approve tokens for the bridge to take\\n            TransferHelper.safeApprove(\\n                _bridgeData.tokenIn,\\n                address(bridge),\\n                finalAmount\\n            );\\n\\n            // Execute bridge process\\n            bridge.send(\\n                _bridgeData.tokenIn,\\n                address(this),\\n                finalAmount,\\n                _bridgeData.toChainId,\\n                _bridgeData.data\\n            );\\n\\n            // Emit event for relayer\\n            emit CrossInitiated(_txUuid, finalAmount);\\n        }\\n        else {\\n            // Bridging is not required, means we are not changing network\\n            // so we send the assets back to the user\\n            TransferHelper.safeTransfer(_swapData.tokenOut, msg.sender, finalAmount);\\n            emit SwapExecuted(_txUuid, finalAmount);\\n        }\\n    }\\n\\n\\n    /**\\n     * Finalize the process of swidging\\n     * @dev This function is executed on the destination chain\\n     */\\n    function finalizeTokenCross(\\n        uint256 _amount,\\n        address _receiver,\\n        SwapData calldata _swapData,\\n        bytes calldata _txUuid\\n    ) external payable onlyRelayer {\\n        IDEX swapper = swapProviders[_swapData.providerCode];\\n\\n        // Approve swapper contract\\n        TransferHelper.safeApprove(\\n            _swapData.tokenIn,\\n            address(swapper),\\n            _amount\\n        );\\n\\n        // Execute swap with ZeroEx and compute final `boughtAmount`\\n        uint256 boughtAmount = swapper.swap(\\n            _swapData.tokenIn,\\n            _swapData.tokenOut,\\n            address(this),\\n            _amount,\\n            _swapData.data\\n        );\\n\\n        // Send tokens to the user\\n        TransferHelper.safeTransfer(\\n            _swapData.tokenOut,\\n            _receiver,\\n            boughtAmount\\n        );\\n\\n        emit CrossFinalized(_txUuid, boughtAmount);\\n    }\\n\\n    /// To retrieve any tokens that got stuck on the contract\\n    function retrieve(address _token, uint256 _amount) external onlyOwner {\\n        TransferHelper.safeTransfer(_token, msg.sender, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x55f7eaf04cb8e56b9fee177d5962440482e15a748ee1f00a03878534ec03466f\",\"license\":\"MIT\"},\"contracts/bridge/IBridge.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Provider.sol\\\";\\n\\nabstract contract IBridge is Provider {\\n    function send(\\n        address _token,\\n        address _router,\\n        uint256 _amount,\\n        uint256 _toChainId,\\n        bytes calldata _data\\n    ) external virtual;\\n}\\n\",\"keccak256\":\"0x532da4818cd3f2f88861bcbd63a7143fcc0c8686cac4064a3ddbf05c7bd4c3a2\",\"license\":\"MIT\"},\"contracts/dexs/IDEX.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Provider.sol\\\";\\n\\nabstract contract IDEX is Provider {\\n    function swap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _router,\\n        uint256 _amountIn,\\n        bytes calldata _data\\n    ) external payable virtual returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0x3d56b3a4cebdd81d11eb6833ad5c1ed0c7a7457e3e4aaf9c80471986d07ca9cf\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611e368061010d6000396000f3fe6080604052600436106100865760003560e01c8063a5d62e3911610059578063a5d62e3914610112578063c3a2a6651461013b578063c686e56614610164578063ee0fab0114610180578063f2fde38b146101a957610086565b8063338fac101461008b578063715018a6146100a75780638da5cb5b146100be5780638f83ab13146100e9575b600080fd5b6100a560048036038101906100a09190611569565b6101d2565b005b3480156100b357600080fd5b506100bc610402565b005b3480156100ca57600080fd5b506100d361048a565b6040516100e09190611871565b60405180910390f35b3480156100f557600080fd5b50610110600480360381019061010b9190611411565b6104b3565b005b34801561011e57600080fd5b50610139600480360381019061013491906114c8565b6105f6565b005b34801561014757600080fd5b50610162600480360381019061015d919061143a565b610745565b005b61017e60048036038101906101799190611601565b6107d0565b005b34801561018c57600080fd5b506101a760048036038101906101a29190611504565b610bd4565b005b3480156101b557600080fd5b506101d060048036038101906101cb9190611411565b610d23565b005b6101da610e1b565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610269576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026090611a3f565b60405180910390fd5b60006003600085600001602081019061028291906116b1565b60ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506102d68460200160208101906102cf9190611411565b8288610e23565b60008173ffffffffffffffffffffffffffffffffffffffff1663da1452638660200160208101906103079190611411565b87604001602081019061031a9190611411565b308b8a806060019061032c9190611b08565b6040518763ffffffff1660e01b815260040161034d969594939291906118b5565b602060405180830381600087803b15801561036757600080fd5b505af115801561037b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039f9190611540565b90506103be8560400160208101906103b79190611411565b8783610f78565b7f362f1dc16df73c13f29e4ee8a86edaab35b03cef1c00feeb07f7740f9bda0baa8484836040516103f1939291906119cd565b60405180910390a150505050505050565b61040a610e1b565b73ffffffffffffffffffffffffffffffffffffffff1661042861048a565b73ffffffffffffffffffffffffffffffffffffffff161461047e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047590611a7f565b60405180910390fd5b61048860006110cd565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6104bb610e1b565b73ffffffffffffffffffffffffffffffffffffffff166104d961048a565b73ffffffffffffffffffffffffffffffffffffffff161461052f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052690611a7f565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f520d2fe8d36523bd823431712d1c775cfc24b79f19a9f945a96de545a40cbd9081600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516105ea92919061188c565b60405180910390a15050565b6105fe610e1b565b73ffffffffffffffffffffffffffffffffffffffff1661061c61048a565b73ffffffffffffffffffffffffffffffffffffffff1614610672576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066990611a7f565b60405180910390fd5b60008260008111156106ad577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b905081600260008360ff1660ff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f422ef8013bd789a685024cf40c45fce12f863be158208bc0477bf785fcd5500a8183604051610738929190611adf565b60405180910390a1505050565b61074d610e1b565b73ffffffffffffffffffffffffffffffffffffffff1661076b61048a565b73ffffffffffffffffffffffffffffffffffffffff16146107c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b890611a7f565b60405180910390fd5b6107cc823383610f78565b5050565b8360800160208101906107e39190611476565b806107fd57508260600160208101906107fc9190611476565b5b61083c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083390611abf565b60405180910390fd5b60008460800160208101906108519190611476565b15610870578460200160208101906108699190611411565b9050610886565b8360000160208101906108839190611411565b90505b61089281333089611191565b60008560800160208101906108a79190611476565b156109e9576000600360008860000160208101906108c591906116b1565b60ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506109198760200160208101906109129190611411565b828a610e23565b8073ffffffffffffffffffffffffffffffffffffffff1663da145263348960200160208101906109499190611411565b8a604001602081019061095c9190611411565b308d8d806060019061096e9190611b08565b6040518863ffffffff1660e01b815260040161098f969594939291906118b5565b6020604051808303818588803b1580156109a857600080fd5b505af11580156109bc573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906109e19190611540565b9150506109ed565b8690505b846060016020810190610a009190611476565b15610b7257600060026000806000811115610a44577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610a98866000016020810190610a919190611411565b8284610e23565b8073ffffffffffffffffffffffffffffffffffffffff1663148f2d11876000016020810190610ac79190611411565b30858a602001358b8060400190610ade9190611b08565b6040518763ffffffff1660e01b8152600401610aff96959493929190611948565b600060405180830381600087803b158015610b1957600080fd5b505af1158015610b2d573d6000803e3d6000fd5b505050507fab32a789f5dc49e131f552ab261b45550aba3f5ec0da3360f54244e207d0866d858584604051610b64939291906119cd565b60405180910390a150610bcb565b610b8f866040016020810190610b889190611411565b3383610f78565b7fd86c8083c5e8c674980d93a1821418cf0bbcaf34f6734517035f39f71b1ed37f848483604051610bc2939291906119cd565b60405180910390a15b50505050505050565b610bdc610e1b565b73ffffffffffffffffffffffffffffffffffffffff16610bfa61048a565b73ffffffffffffffffffffffffffffffffffffffff1614610c50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4790611a7f565b60405180910390fd5b6000826001811115610c8b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b905081600360008360ff1660ff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f02ff0a53f4ed9556910231f6135590802c296e94aa78909d303cdc77ab5cc5118183604051610d16929190611adf565b60405180910390a1505050565b610d2b610e1b565b73ffffffffffffffffffffffffffffffffffffffff16610d4961048a565b73ffffffffffffffffffffffffffffffffffffffff1614610d9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9690611a7f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0690611a1f565b60405180910390fd5b610e18816110cd565b50565b600033905090565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b8585604051602401610e589291906119a4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610ec2919061185a565b6000604051808303816000865af19150503d8060008114610eff576040519150601f19603f3d011682016040523d82523d6000602084013e610f04565b606091505b5091509150818015610f325750600081511480610f31575080806020019051810190610f30919061149f565b5b5b610f71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f68906119ff565b60405180910390fd5b5050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8585604051602401610fad9291906119a4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611017919061185a565b6000604051808303816000865af19150503d8060008114611054576040519150601f19603f3d011682016040523d82523d6000602084013e611059565b606091505b50915091508180156110875750600081511480611086575080806020019051810190611085919061149f565b5b5b6110c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110bd90611a5f565b60405180910390fd5b5050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b8686866040516024016111c893929190611911565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611232919061185a565b6000604051808303816000865af19150503d806000811461126f576040519150601f19603f3d011682016040523d82523d6000602084013e611274565b606091505b50915091508180156112a257506000815114806112a15750808060200190518101906112a0919061149f565b5b5b6112e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d890611a9f565b60405180910390fd5b505050505050565b6000813590506112f881611d84565b92915050565b60008135905061130d81611d9b565b92915050565b60008151905061132281611d9b565b92915050565b60008083601f84011261133a57600080fd5b8235905067ffffffffffffffff81111561135357600080fd5b60208301915083600182028301111561136b57600080fd5b9250929050565b60008135905061138181611db2565b92915050565b60008135905061139681611dc2565b92915050565b6000608082840312156113ae57600080fd5b81905092915050565b600060a082840312156113c957600080fd5b81905092915050565b6000813590506113e181611dd2565b92915050565b6000815190506113f681611dd2565b92915050565b60008135905061140b81611de9565b92915050565b60006020828403121561142357600080fd5b6000611431848285016112e9565b91505092915050565b6000806040838503121561144d57600080fd5b600061145b858286016112e9565b925050602061146c858286016113d2565b9150509250929050565b60006020828403121561148857600080fd5b6000611496848285016112fe565b91505092915050565b6000602082840312156114b157600080fd5b60006114bf84828501611313565b91505092915050565b600080604083850312156114db57600080fd5b60006114e985828601611372565b92505060206114fa858286016112e9565b9150509250929050565b6000806040838503121561151757600080fd5b600061152585828601611387565b9250506020611536858286016112e9565b9150509250929050565b60006020828403121561155257600080fd5b6000611560848285016113e7565b91505092915050565b60008060008060006080868803121561158157600080fd5b600061158f888289016113d2565b95505060206115a0888289016112e9565b945050604086013567ffffffffffffffff8111156115bd57600080fd5b6115c9888289016113b7565b935050606086013567ffffffffffffffff8111156115e657600080fd5b6115f288828901611328565b92509250509295509295909350565b60008060008060006080868803121561161957600080fd5b6000611627888289016113d2565b955050602086013567ffffffffffffffff81111561164457600080fd5b611650888289016113b7565b945050604086013567ffffffffffffffff81111561166d57600080fd5b6116798882890161139c565b935050606086013567ffffffffffffffff81111561169657600080fd5b6116a288828901611328565b92509250509295509295909350565b6000602082840312156116c357600080fd5b60006116d1848285016113fc565b91505092915050565b6116e381611b97565b82525050565b60006116f58385611b6a565b9350611702838584611bec565b61170b83611c2e565b840190509392505050565b600061172182611b5f565b61172b8185611b7b565b935061173b818560208601611bfb565b80840191505092915050565b6000611754600283611b86565b915061175f82611c3f565b602082019050919050565b6000611777602683611b86565b915061178282611c68565b604082019050919050565b600061179a601983611b86565b91506117a582611cb7565b602082019050919050565b60006117bd600283611b86565b91506117c882611ce0565b602082019050919050565b60006117e0602083611b86565b91506117eb82611d09565b602082019050919050565b6000611803600383611b86565b915061180e82611d32565b602082019050919050565b6000611826601383611b86565b915061183182611d5b565b602082019050919050565b61184581611bd5565b82525050565b61185481611bdf565b82525050565b60006118668284611716565b915081905092915050565b600060208201905061188660008301846116da565b92915050565b60006040820190506118a160008301856116da565b6118ae60208301846116da565b9392505050565b600060a0820190506118ca60008301896116da565b6118d760208301886116da565b6118e460408301876116da565b6118f1606083018661183c565b81810360808301526119048184866116e9565b9050979650505050505050565b600060608201905061192660008301866116da565b61193360208301856116da565b611940604083018461183c565b949350505050565b600060a08201905061195d60008301896116da565b61196a60208301886116da565b611977604083018761183c565b611984606083018661183c565b81810360808301526119978184866116e9565b9050979650505050505050565b60006040820190506119b960008301856116da565b6119c6602083018461183c565b9392505050565b600060408201905081810360008301526119e88185876116e9565b90506119f7602083018461183c565b949350505050565b60006020820190508181036000830152611a1881611747565b9050919050565b60006020820190508181036000830152611a388161176a565b9050919050565b60006020820190508181036000830152611a588161178d565b9050919050565b60006020820190508181036000830152611a78816117b0565b9050919050565b60006020820190508181036000830152611a98816117d3565b9050919050565b60006020820190508181036000830152611ab8816117f6565b9050919050565b60006020820190508181036000830152611ad881611819565b9050919050565b6000604082019050611af4600083018561184b565b611b0160208301846116da565b9392505050565b60008083356001602003843603038112611b2157600080fd5b80840192508235915067ffffffffffffffff821115611b3f57600080fd5b602083019250600182023603831315611b5757600080fd5b509250929050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000611ba282611bb5565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015611c19578082015181840152602081019050611bfe565b83811115611c28576000848401525b50505050565b6000601f19601f8301169050919050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f43616c6c6572206973206e6f74207468652072656c6179657200000000000000600082015250565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b7f4e6f20726571756972656420616374696f6e7300000000000000000000000000600082015250565b611d8d81611b97565b8114611d9857600080fd5b50565b611da481611ba9565b8114611daf57600080fd5b50565b60018110611dbf57600080fd5b50565b60028110611dcf57600080fd5b50565b611ddb81611bd5565b8114611de657600080fd5b50565b611df281611bdf565b8114611dfd57600080fd5b5056fea2646970667358221220242c3579124e06d880174447fe38d1105161bf58218749d2c5dd44b73045001f64736f6c63430008010033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c8063a5d62e3911610059578063a5d62e3914610112578063c3a2a6651461013b578063c686e56614610164578063ee0fab0114610180578063f2fde38b146101a957610086565b8063338fac101461008b578063715018a6146100a75780638da5cb5b146100be5780638f83ab13146100e9575b600080fd5b6100a560048036038101906100a09190611569565b6101d2565b005b3480156100b357600080fd5b506100bc610402565b005b3480156100ca57600080fd5b506100d361048a565b6040516100e09190611871565b60405180910390f35b3480156100f557600080fd5b50610110600480360381019061010b9190611411565b6104b3565b005b34801561011e57600080fd5b50610139600480360381019061013491906114c8565b6105f6565b005b34801561014757600080fd5b50610162600480360381019061015d919061143a565b610745565b005b61017e60048036038101906101799190611601565b6107d0565b005b34801561018c57600080fd5b506101a760048036038101906101a29190611504565b610bd4565b005b3480156101b557600080fd5b506101d060048036038101906101cb9190611411565b610d23565b005b6101da610e1b565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610269576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026090611a3f565b60405180910390fd5b60006003600085600001602081019061028291906116b1565b60ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506102d68460200160208101906102cf9190611411565b8288610e23565b60008173ffffffffffffffffffffffffffffffffffffffff1663da1452638660200160208101906103079190611411565b87604001602081019061031a9190611411565b308b8a806060019061032c9190611b08565b6040518763ffffffff1660e01b815260040161034d969594939291906118b5565b602060405180830381600087803b15801561036757600080fd5b505af115801561037b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039f9190611540565b90506103be8560400160208101906103b79190611411565b8783610f78565b7f362f1dc16df73c13f29e4ee8a86edaab35b03cef1c00feeb07f7740f9bda0baa8484836040516103f1939291906119cd565b60405180910390a150505050505050565b61040a610e1b565b73ffffffffffffffffffffffffffffffffffffffff1661042861048a565b73ffffffffffffffffffffffffffffffffffffffff161461047e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047590611a7f565b60405180910390fd5b61048860006110cd565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6104bb610e1b565b73ffffffffffffffffffffffffffffffffffffffff166104d961048a565b73ffffffffffffffffffffffffffffffffffffffff161461052f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052690611a7f565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f520d2fe8d36523bd823431712d1c775cfc24b79f19a9f945a96de545a40cbd9081600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516105ea92919061188c565b60405180910390a15050565b6105fe610e1b565b73ffffffffffffffffffffffffffffffffffffffff1661061c61048a565b73ffffffffffffffffffffffffffffffffffffffff1614610672576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066990611a7f565b60405180910390fd5b60008260008111156106ad577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b905081600260008360ff1660ff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f422ef8013bd789a685024cf40c45fce12f863be158208bc0477bf785fcd5500a8183604051610738929190611adf565b60405180910390a1505050565b61074d610e1b565b73ffffffffffffffffffffffffffffffffffffffff1661076b61048a565b73ffffffffffffffffffffffffffffffffffffffff16146107c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b890611a7f565b60405180910390fd5b6107cc823383610f78565b5050565b8360800160208101906107e39190611476565b806107fd57508260600160208101906107fc9190611476565b5b61083c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083390611abf565b60405180910390fd5b60008460800160208101906108519190611476565b15610870578460200160208101906108699190611411565b9050610886565b8360000160208101906108839190611411565b90505b61089281333089611191565b60008560800160208101906108a79190611476565b156109e9576000600360008860000160208101906108c591906116b1565b60ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506109198760200160208101906109129190611411565b828a610e23565b8073ffffffffffffffffffffffffffffffffffffffff1663da145263348960200160208101906109499190611411565b8a604001602081019061095c9190611411565b308d8d806060019061096e9190611b08565b6040518863ffffffff1660e01b815260040161098f969594939291906118b5565b6020604051808303818588803b1580156109a857600080fd5b505af11580156109bc573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906109e19190611540565b9150506109ed565b8690505b846060016020810190610a009190611476565b15610b7257600060026000806000811115610a44577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050610a98866000016020810190610a919190611411565b8284610e23565b8073ffffffffffffffffffffffffffffffffffffffff1663148f2d11876000016020810190610ac79190611411565b30858a602001358b8060400190610ade9190611b08565b6040518763ffffffff1660e01b8152600401610aff96959493929190611948565b600060405180830381600087803b158015610b1957600080fd5b505af1158015610b2d573d6000803e3d6000fd5b505050507fab32a789f5dc49e131f552ab261b45550aba3f5ec0da3360f54244e207d0866d858584604051610b64939291906119cd565b60405180910390a150610bcb565b610b8f866040016020810190610b889190611411565b3383610f78565b7fd86c8083c5e8c674980d93a1821418cf0bbcaf34f6734517035f39f71b1ed37f848483604051610bc2939291906119cd565b60405180910390a15b50505050505050565b610bdc610e1b565b73ffffffffffffffffffffffffffffffffffffffff16610bfa61048a565b73ffffffffffffffffffffffffffffffffffffffff1614610c50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4790611a7f565b60405180910390fd5b6000826001811115610c8b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b905081600360008360ff1660ff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f02ff0a53f4ed9556910231f6135590802c296e94aa78909d303cdc77ab5cc5118183604051610d16929190611adf565b60405180910390a1505050565b610d2b610e1b565b73ffffffffffffffffffffffffffffffffffffffff16610d4961048a565b73ffffffffffffffffffffffffffffffffffffffff1614610d9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9690611a7f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0690611a1f565b60405180910390fd5b610e18816110cd565b50565b600033905090565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b8585604051602401610e589291906119a4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610ec2919061185a565b6000604051808303816000865af19150503d8060008114610eff576040519150601f19603f3d011682016040523d82523d6000602084013e610f04565b606091505b5091509150818015610f325750600081511480610f31575080806020019051810190610f30919061149f565b5b5b610f71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f68906119ff565b60405180910390fd5b5050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8585604051602401610fad9291906119a4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611017919061185a565b6000604051808303816000865af19150503d8060008114611054576040519150601f19603f3d011682016040523d82523d6000602084013e611059565b606091505b50915091508180156110875750600081511480611086575080806020019051810190611085919061149f565b5b5b6110c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110bd90611a5f565b60405180910390fd5b5050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b8686866040516024016111c893929190611911565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611232919061185a565b6000604051808303816000865af19150503d806000811461126f576040519150601f19603f3d011682016040523d82523d6000602084013e611274565b606091505b50915091508180156112a257506000815114806112a15750808060200190518101906112a0919061149f565b5b5b6112e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d890611a9f565b60405180910390fd5b505050505050565b6000813590506112f881611d84565b92915050565b60008135905061130d81611d9b565b92915050565b60008151905061132281611d9b565b92915050565b60008083601f84011261133a57600080fd5b8235905067ffffffffffffffff81111561135357600080fd5b60208301915083600182028301111561136b57600080fd5b9250929050565b60008135905061138181611db2565b92915050565b60008135905061139681611dc2565b92915050565b6000608082840312156113ae57600080fd5b81905092915050565b600060a082840312156113c957600080fd5b81905092915050565b6000813590506113e181611dd2565b92915050565b6000815190506113f681611dd2565b92915050565b60008135905061140b81611de9565b92915050565b60006020828403121561142357600080fd5b6000611431848285016112e9565b91505092915050565b6000806040838503121561144d57600080fd5b600061145b858286016112e9565b925050602061146c858286016113d2565b9150509250929050565b60006020828403121561148857600080fd5b6000611496848285016112fe565b91505092915050565b6000602082840312156114b157600080fd5b60006114bf84828501611313565b91505092915050565b600080604083850312156114db57600080fd5b60006114e985828601611372565b92505060206114fa858286016112e9565b9150509250929050565b6000806040838503121561151757600080fd5b600061152585828601611387565b9250506020611536858286016112e9565b9150509250929050565b60006020828403121561155257600080fd5b6000611560848285016113e7565b91505092915050565b60008060008060006080868803121561158157600080fd5b600061158f888289016113d2565b95505060206115a0888289016112e9565b945050604086013567ffffffffffffffff8111156115bd57600080fd5b6115c9888289016113b7565b935050606086013567ffffffffffffffff8111156115e657600080fd5b6115f288828901611328565b92509250509295509295909350565b60008060008060006080868803121561161957600080fd5b6000611627888289016113d2565b955050602086013567ffffffffffffffff81111561164457600080fd5b611650888289016113b7565b945050604086013567ffffffffffffffff81111561166d57600080fd5b6116798882890161139c565b935050606086013567ffffffffffffffff81111561169657600080fd5b6116a288828901611328565b92509250509295509295909350565b6000602082840312156116c357600080fd5b60006116d1848285016113fc565b91505092915050565b6116e381611b97565b82525050565b60006116f58385611b6a565b9350611702838584611bec565b61170b83611c2e565b840190509392505050565b600061172182611b5f565b61172b8185611b7b565b935061173b818560208601611bfb565b80840191505092915050565b6000611754600283611b86565b915061175f82611c3f565b602082019050919050565b6000611777602683611b86565b915061178282611c68565b604082019050919050565b600061179a601983611b86565b91506117a582611cb7565b602082019050919050565b60006117bd600283611b86565b91506117c882611ce0565b602082019050919050565b60006117e0602083611b86565b91506117eb82611d09565b602082019050919050565b6000611803600383611b86565b915061180e82611d32565b602082019050919050565b6000611826601383611b86565b915061183182611d5b565b602082019050919050565b61184581611bd5565b82525050565b61185481611bdf565b82525050565b60006118668284611716565b915081905092915050565b600060208201905061188660008301846116da565b92915050565b60006040820190506118a160008301856116da565b6118ae60208301846116da565b9392505050565b600060a0820190506118ca60008301896116da565b6118d760208301886116da565b6118e460408301876116da565b6118f1606083018661183c565b81810360808301526119048184866116e9565b9050979650505050505050565b600060608201905061192660008301866116da565b61193360208301856116da565b611940604083018461183c565b949350505050565b600060a08201905061195d60008301896116da565b61196a60208301886116da565b611977604083018761183c565b611984606083018661183c565b81810360808301526119978184866116e9565b9050979650505050505050565b60006040820190506119b960008301856116da565b6119c6602083018461183c565b9392505050565b600060408201905081810360008301526119e88185876116e9565b90506119f7602083018461183c565b949350505050565b60006020820190508181036000830152611a1881611747565b9050919050565b60006020820190508181036000830152611a388161176a565b9050919050565b60006020820190508181036000830152611a588161178d565b9050919050565b60006020820190508181036000830152611a78816117b0565b9050919050565b60006020820190508181036000830152611a98816117d3565b9050919050565b60006020820190508181036000830152611ab8816117f6565b9050919050565b60006020820190508181036000830152611ad881611819565b9050919050565b6000604082019050611af4600083018561184b565b611b0160208301846116da565b9392505050565b60008083356001602003843603038112611b2157600080fd5b80840192508235915067ffffffffffffffff821115611b3f57600080fd5b602083019250600182023603831315611b5757600080fd5b509250929050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000611ba282611bb5565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015611c19578082015181840152602081019050611bfe565b83811115611c28576000848401525b50505050565b6000601f19601f8301169050919050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f43616c6c6572206973206e6f74207468652072656c6179657200000000000000600082015250565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b7f4e6f20726571756972656420616374696f6e7300000000000000000000000000600082015250565b611d8d81611b97565b8114611d9857600080fd5b50565b611da481611ba9565b8114611daf57600080fd5b50565b60018110611dbf57600080fd5b50565b60028110611dcf57600080fd5b50565b611ddb81611bd5565b8114611de657600080fd5b50565b611df281611bdf565b8114611dfd57600080fd5b5056fea2646970667358221220242c3579124e06d880174447fe38d1105161bf58218749d2c5dd44b73045001f64736f6c63430008010033",
  "devdoc": {
    "events": {
      "CrossFinalized(bytes,uint256)": {
        "details": "Emitted when a multi-chain swap is finalized"
      },
      "CrossInitiated(bytes,uint256)": {
        "details": "Emitted when a multi-chain swap is initiated"
      },
      "SwapExecuted(bytes,uint256)": {
        "details": "Emitted when a single-chain swap is completed"
      },
      "UpdatedBridgeProvider(uint8,address)": {
        "details": "Emitted when a bridge provider address is updated"
      },
      "UpdatedRelayer(address,address)": {
        "details": "Emitted when the relayer address is updated"
      },
      "UpdatedSwapProvider(uint8,address)": {
        "details": "Emitted when a swap provider address is updated"
      }
    },
    "kind": "dev",
    "methods": {
      "finalizeTokenCross(uint256,address,(uint8,address,address,bytes,bool),bytes)": {
        "details": "This function is executed on the destination chain"
      },
      "initTokensCross(uint256,(uint8,address,address,bytes,bool),(address,uint256,bytes,bool),bytes)": {
        "details": "This function is executed on the origin chain"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateBridgeProvider(uint8,address)": {
        "details": "Updates the address of a bridge provider contract"
      },
      "updateRelayer(address)": {
        "details": "Updates the address of the authorized relayer"
      },
      "updateSwapProvider(uint8,address)": {
        "details": "Updates the address of a swap provider contract"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "finalizeTokenCross(uint256,address,(uint8,address,address,bytes,bool),bytes)": {
        "notice": "Finalize the process of swidging"
      },
      "initTokensCross(uint256,(uint8,address,address,bytes,bool),(address,uint256,bytes,bool),bytes)": {
        "notice": "Init the process of swidging"
      },
      "retrieve(address,uint256)": {
        "notice": "To retrieve any tokens that got stuck on the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Router.sol:Router",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 560,
        "contract": "contracts/Router.sol:Router",
        "label": "relayerAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 565,
        "contract": "contracts/Router.sol:Router",
        "label": "bridgeProviders",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint8,t_contract(IBridge)1014)"
      },
      {
        "astId": 570,
        "contract": "contracts/Router.sol:Router",
        "label": "swapProviders",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint8,t_contract(IDEX)1035)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IBridge)1014": {
        "encoding": "inplace",
        "label": "contract IBridge",
        "numberOfBytes": "20"
      },
      "t_contract(IDEX)1035": {
        "encoding": "inplace",
        "label": "contract IDEX",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint8,t_contract(IBridge)1014)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => contract IBridge)",
        "numberOfBytes": "32",
        "value": "t_contract(IBridge)1014"
      },
      "t_mapping(t_uint8,t_contract(IDEX)1035)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => contract IDEX)",
        "numberOfBytes": "32",
        "value": "t_contract(IDEX)1035"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}