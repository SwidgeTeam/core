{
  "address": "0x3cCcCcFaF090d8eD924833a8f155BeE2094b8B79",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_anyswapRouterAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dstSwapIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dstSwapOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "CrossInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "callAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Router.SwapData",
          "name": "_swapData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "finalizeTokenCross",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_srcAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "callAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Router.SwapData",
          "name": "_srcSwapData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "callAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Router.SwapData",
          "name": "_dstSwapData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "toChainId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Router.BridgeData",
          "name": "_bridgeData",
          "type": "tuple"
        }
      ],
      "name": "initTokensCross",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "retrieve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaa96307addc809bad79718dbff018343809cbfc1c4d73f3a0354bc9ee818eb7d",
  "receipt": {
    "to": null,
    "from": "0x7228ebf7C311e82867F08Ad6Dd3FCfbC2adB41A9",
    "contractAddress": "0x3cCcCcFaF090d8eD924833a8f155BeE2094b8B79",
    "transactionIndex": 17,
    "gasUsed": "1471825",
    "logsBloom": "0x
    "blockHash": "0x92cc25640045a1aae566a59923e47b201fe5a2ed9538f958f12d9415aab13cf5",
    "transactionHash": "0xaa96307addc809bad79718dbff018343809cbfc1c4d73f3a0354bc9ee818eb7d",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 27282192,
        "transactionHash": "0xaa96307addc809bad79718dbff018343809cbfc1c4d73f3a0354bc9ee818eb7d",
        "address": "0x3cCcCcFaF090d8eD924833a8f155BeE2094b8B79",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007228ebf7c311e82867f08ad6dd3fcfbc2adb41a9"
        ],
        "data": "0x",
        "logIndex": 53,
        "blockHash": "0x92cc25640045a1aae566a59923e47b201fe5a2ed9538f958f12d9415aab13cf5"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 27282192,
        "transactionHash": "0xaa96307addc809bad79718dbff018343809cbfc1c4d73f3a0354bc9ee818eb7d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007228ebf7c311e82867f08ad6dd3fcfbc2adb41a9",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000d6e928873244640000000000000000000000000000000000000000000000001a8ce84a07b648390000000000000000000000000000000000000000000000f520f3d96d0ad5489600000000000000000000000000000000000000000000000019b5ff21808403d50000000000000000000000000000000000000000000000f521cac29592078cfa",
        "logIndex": 54,
        "blockHash": "0x92cc25640045a1aae566a59923e47b201fe5a2ed9538f958f12d9415aab13cf5"
      }
    ],
    "blockNumber": 27282192,
    "cumulativeGasUsed": "3907504",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb95f4f9767F9C837dCab7F3956760350F16dD95E"
  ],
  "numDeployments": 2,
  "solcInputHash": "85e3bad8a7553ecd0888d2671c208e6e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_anyswapRouterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstSwapIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstSwapOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"CrossInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"callAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Router.SwapData\",\"name\":\"_swapData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"finalizeTokenCross\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_srcAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"callAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Router.SwapData\",\"name\":\"_srcSwapData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"callAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Router.SwapData\",\"name\":\"_dstSwapData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Router.BridgeData\",\"name\":\"_bridgeData\",\"type\":\"tuple\"}],\"name\":\"initTokensCross\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"retrieve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_anyswapRouterAddress\":\"Address of the default bridge\"}},\"initTokensCross(uint256,(address,address,address,bytes),(address,address,address,bytes),(address,uint256,bytes))\":{\"details\":\"This function is executed on the origin chain\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"finalizeTokenCross((address,address,address,bytes),uint256,address)\":{\"notice\":\"Finalize the process of swidging\"},\"initTokensCross(uint256,(address,address,address,bytes),(address,address,address,bytes),(address,uint256,bytes))\":{\"notice\":\"Init the process of swidging\"},\"retrieve(address,uint256)\":{\"notice\":\"To retrieve any tokens that got stuck on the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Router.sol\":\"Router\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Router.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"./dexs/IDEX.sol\\\";\\nimport \\\"./bridge/IBridge.sol\\\";\\n\\ncontract Router is Ownable {\\n    mapping(uint8 => IBridge) private bridgeProviders;\\n\\n    enum bridgeCode {\\n        Anyswap // 0\\n    }\\n\\n    /// @param _anyswapRouterAddress Address of the default bridge\\n    constructor(address _anyswapRouterAddress) {\\n        bridgeProviders[uint8(bridgeCode.Anyswap)] = IBridge(_anyswapRouterAddress);\\n    }\\n\\n    struct SwapData {\\n        address tokenIn;\\n        address tokenOut;\\n        address payable callAddress;\\n        bytes callData;\\n    }\\n\\n    struct BridgeData {\\n        address tokenIn;\\n        uint256 toChainId;\\n        bytes data;\\n    }\\n\\n    event CrossInitiated(\\n        uint256 indexed toChainId,\\n        uint256 amount,\\n        address receiver,\\n        address dstSwapIn,\\n        address dstSwapOut,\\n        address maker,\\n        bytes data\\n    );\\n\\n    /// Init the process of swidging\\n    /// @dev This function is executed on the origin chain\\n    function initTokensCross(\\n        uint256 _srcAmount,\\n        SwapData calldata _srcSwapData,\\n        SwapData calldata _dstSwapData,\\n        BridgeData calldata _bridgeData\\n    ) external payable {\\n        // Take ownership of user's tokens\\n        TransferHelper.safeTransferFrom(\\n            _srcSwapData.tokenIn,\\n            msg.sender,\\n            address(this),\\n            _srcAmount\\n        );\\n\\n        // Approve to ZeroEx\\n        TransferHelper.safeApprove(\\n            _srcSwapData.tokenIn,\\n            _srcSwapData.callAddress,\\n            _srcAmount\\n        );\\n\\n        // Execute swap with ZeroEx and compute final `boughtAmount`\\n        uint256 boughtAmount = IERC20(_srcSwapData.tokenOut).balanceOf(address(this));\\n        (bool success,) = _srcSwapData.callAddress.call{value : msg.value}(_srcSwapData.callData);\\n        require(success, \\\"SWAP FAILED\\\");\\n        boughtAmount = IERC20(_srcSwapData.tokenOut).balanceOf(address(this)) - boughtAmount;\\n\\n        // Load selected bridge provider\\n        IBridge bridge = bridgeProviders[uint8(bridgeCode.Anyswap)];\\n\\n        // Approve tokens for the bridge to take\\n        TransferHelper.safeApprove(\\n            _bridgeData.tokenIn,\\n            address(bridge),\\n            boughtAmount\\n        );\\n\\n        // Execute bridge process\\n        bridge.send(\\n            _bridgeData.tokenIn,\\n            address(this),\\n            boughtAmount,\\n            _bridgeData.toChainId,\\n            _bridgeData.data\\n        );\\n\\n        // Refund any unspent protocol fees to the sender.\\n        payable(msg.sender).transfer(address(this).balance);\\n\\n        // Emit event for relayer\\n        emit CrossInitiated(\\n            _bridgeData.toChainId,\\n            boughtAmount,\\n            msg.sender,\\n            _dstSwapData.tokenIn,\\n            _dstSwapData.tokenOut,\\n            _dstSwapData.callAddress,\\n            _dstSwapData.callData\\n        );\\n    }\\n\\n    /// Finalize the process of swidging\\n    function finalizeTokenCross(\\n        SwapData calldata _swapData,\\n        uint256 _amount,\\n        address _receiver\\n    ) external payable {\\n        // Approve to ZeroEx\\n        TransferHelper.safeApprove(\\n            _swapData.tokenIn,\\n            _swapData.callAddress,\\n            _amount\\n        );\\n\\n        // Execute swap with ZeroEx and compute final `boughtAmount`\\n        uint256 boughtAmount = IERC20(_swapData.tokenOut).balanceOf(address(this));\\n        (bool success,) = _swapData.callAddress.call{value : msg.value}(_swapData.callData);\\n        require(success, \\\"SWAP FAILED\\\");\\n        boughtAmount = IERC20(_swapData.tokenOut).balanceOf(address(this)) - boughtAmount;\\n\\n        // Send tokens to the user\\n        TransferHelper.safeTransfer(\\n            _swapData.tokenOut,\\n            _receiver,\\n            boughtAmount\\n        );\\n    }\\n\\n    /// To retrieve any tokens that got stuck on the contract\\n    function retrieve(address _token, uint256 _amount) external onlyOwner {\\n        TransferHelper.safeTransfer(_token, msg.sender, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xe1907d56da5bf2433e28a1fdf4d126be38f947d039e34702515f733b651a7cc9\",\"license\":\"MIT\"},\"contracts/bridge/IBridge.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\n\\nabstract contract IBridge is Ownable {\\n    address private router;\\n\\n    modifier onlyRouter() {\\n        require(msg.sender == router, \\\"Unauthorized caller\\\");\\n        _;\\n    }\\n\\n    event UpdatedRouter(address indexed routerAddress);\\n\\n    function updateRouter(address routerAddress) external onlyOwner {\\n        router = routerAddress;\\n        emit UpdatedRouter(routerAddress);\\n    }\\n\\n    function retrieve(address _token, uint256 _amount) external onlyOwner {\\n        TransferHelper.safeTransfer(_token, msg.sender, _amount);\\n    }\\n\\n    function send(\\n        address _token,\\n        address _router,\\n        uint256 _amount,\\n        uint256 _toChainId,\\n        bytes calldata _data\\n    ) external virtual;\\n}\\n\",\"keccak256\":\"0x9fc067f1481aef391239bf62c5fa8fed97120e24085b7674d90e11b9bfbac4b4\",\"license\":\"MIT\"},\"contracts/dexs/IDEX.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IDEX {\\n\\n    function custodianAddress() external view returns (address);\\n\\n    function swap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        bytes calldata _data\\n    ) external returns (uint256 amountOut);\\n\\n}\\n\\n\",\"keccak256\":\"0x06626777c519b05b3c42d479b547db1ff05f0fac2680df43eda38f7b4ac2c53e\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001b2138038062001b218339818101604052810190620000379190620001d2565b620000576200004b620000ef60201b60201c565b620000f760201b60201c565b806001600080600081111562000096577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60ff1660ff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200024c565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050620001cc8162000232565b92915050565b600060208284031215620001e557600080fd5b6000620001f584828501620001bb565b91505092915050565b60006200020b8262000212565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200023d81620001fe565b81146200024957600080fd5b50565b6118c5806200025c6000396000f3fe6080604052600436106100555760003560e01c806334ca2b511461005a578063715018a6146100765780638da5cb5b1461008d578063c3a2a665146100b8578063e958a77e146100e1578063f2fde38b146100fd575b600080fd5b610074600480360381019061006f91906110e4565b610126565b005b34801561008257600080fd5b5061008b610592565b005b34801561009957600080fd5b506100a261061a565b6040516100af9190611341565b60405180910390f35b3480156100c457600080fd5b506100df60048036038101906100da9190610fef565b610643565b005b6100fb60048036038101906100f69190611054565b6106ce565b005b34801561010957600080fd5b50610124600480360381019061011f9190610f9d565b610938565b005b61014483600001602081019061013c9190610f9d565b333087610a30565b61017383600001602081019061015a9190610f9d565b84604001602081019061016d9190610fc6565b86610b88565b60008360200160208101906101889190610f9d565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016101c09190611341565b60206040518083038186803b1580156101d857600080fd5b505afa1580156101ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021091906110bb565b905060008460400160208101906102279190610fc6565b73ffffffffffffffffffffffffffffffffffffffff163486806060019061024e9190611542565b60405161025c929190611311565b60006040518083038185875af1925050503d8060008114610299576040519150601f19603f3d011682016040523d82523d6000602084013e61029e565b606091505b50509050806102e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d990611438565b60405180910390fd5b818560200160208101906102f69190610f9d565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161032e9190611341565b60206040518083038186803b15801561034657600080fd5b505afa15801561035a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037e91906110bb565b61038891906115d1565b91506000600160008060008111156103c9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061041d8460000160208101906104169190610f9d565b8285610b88565b8073ffffffffffffffffffffffffffffffffffffffff1663148f2d1185600001602081019061044c9190610f9d565b308688602001358980604001906104639190611542565b6040518763ffffffff1660e01b815260040161048496959493929190611393565b600060405180830381600087803b15801561049e57600080fd5b505af11580156104b2573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156104fc573d6000803e3d6000fd5b5083602001357f0b737671bd385ef5037921d101c15434519b4c49d42afb9861cbbf022944e2fe84338860000160208101906105389190610f9d565b89602001602081019061054b9190610f9d565b8a604001602081019061055e9190610fc6565b8b806060019061056e9190611542565b60405161058197969594939291906114d8565b60405180910390a250505050505050565b61059a610cdd565b73ffffffffffffffffffffffffffffffffffffffff166105b861061a565b73ffffffffffffffffffffffffffffffffffffffff161461060e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060590611498565b60405180910390fd5b6106186000610ce5565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61064b610cdd565b73ffffffffffffffffffffffffffffffffffffffff1661066961061a565b73ffffffffffffffffffffffffffffffffffffffff16146106bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b690611498565b60405180910390fd5b6106ca823383610da9565b5050565b6106fd8360000160208101906106e49190610f9d565b8460400160208101906106f79190610fc6565b84610b88565b60008360200160208101906107129190610f9d565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161074a9190611341565b60206040518083038186803b15801561076257600080fd5b505afa158015610776573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079a91906110bb565b905060008460400160208101906107b19190610fc6565b73ffffffffffffffffffffffffffffffffffffffff16348680606001906107d89190611542565b6040516107e6929190611311565b60006040518083038185875af1925050503d8060008114610823576040519150601f19603f3d011682016040523d82523d6000602084013e610828565b606091505b505090508061086c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086390611438565b60405180910390fd5b818560200160208101906108809190610f9d565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108b89190611341565b60206040518083038186803b1580156108d057600080fd5b505afa1580156108e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090891906110bb565b61091291906115d1565b915061093185602001602081019061092a9190610f9d565b8484610da9565b5050505050565b610940610cdd565b73ffffffffffffffffffffffffffffffffffffffff1661095e61061a565b73ffffffffffffffffffffffffffffffffffffffff16146109b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ab90611498565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1b90611458565b60405180910390fd5b610a2d81610ce5565b50565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b868686604051602401610a679392919061135c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610ad1919061132a565b6000604051808303816000865af19150503d8060008114610b0e576040519150601f19603f3d011682016040523d82523d6000602084013e610b13565b606091505b5091509150818015610b415750600081511480610b40575080806020019051810190610b3f919061102b565b5b5b610b80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b77906114b8565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b8585604051602401610bbd9291906113ef565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610c27919061132a565b6000604051808303816000865af19150503d8060008114610c64576040519150601f19603f3d011682016040523d82523d6000602084013e610c69565b606091505b5091509150818015610c975750600081511480610c96575080806020019051810190610c95919061102b565b5b5b610cd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ccd90611418565b60405180910390fd5b5050505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8585604051602401610dde9291906113ef565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610e48919061132a565b6000604051808303816000865af19150503d8060008114610e85576040519150601f19603f3d011682016040523d82523d6000602084013e610e8a565b606091505b5091509150818015610eb85750600081511480610eb7575080806020019051810190610eb6919061102b565b5b5b610ef7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eee90611478565b60405180910390fd5b5050505050565b600081359050610f0d81611833565b92915050565b600081359050610f228161184a565b92915050565b600081519050610f3781611861565b92915050565b600060608284031215610f4f57600080fd5b81905092915050565b600060808284031215610f6a57600080fd5b81905092915050565b600081359050610f8281611878565b92915050565b600081519050610f9781611878565b92915050565b600060208284031215610faf57600080fd5b6000610fbd84828501610efe565b91505092915050565b600060208284031215610fd857600080fd5b6000610fe684828501610f13565b91505092915050565b6000806040838503121561100257600080fd5b600061101085828601610efe565b925050602061102185828601610f73565b9150509250929050565b60006020828403121561103d57600080fd5b600061104b84828501610f28565b91505092915050565b60008060006060848603121561106957600080fd5b600084013567ffffffffffffffff81111561108357600080fd5b61108f86828701610f58565b93505060206110a086828701610f73565b92505060406110b186828701610efe565b9150509250925092565b6000602082840312156110cd57600080fd5b60006110db84828501610f88565b91505092915050565b600080600080608085870312156110fa57600080fd5b600061110887828801610f73565b945050602085013567ffffffffffffffff81111561112557600080fd5b61113187828801610f58565b935050604085013567ffffffffffffffff81111561114e57600080fd5b61115a87828801610f58565b925050606085013567ffffffffffffffff81111561117757600080fd5b61118387828801610f3d565b91505092959194509250565b6111988161165f565b82525050565b6111a781611605565b82525050565b60006111b983856115a4565b93506111c6838584611695565b6111cf83611706565b840190509392505050565b60006111e683856115b5565b93506111f3838584611695565b82840190509392505050565b600061120a82611599565b61121481856115b5565b93506112248185602086016116a4565b80840191505092915050565b600061123d6002836115c0565b915061124882611717565b602082019050919050565b6000611260600b836115c0565b915061126b82611740565b602082019050919050565b60006112836026836115c0565b915061128e82611769565b604082019050919050565b60006112a66002836115c0565b91506112b1826117b8565b602082019050919050565b60006112c96020836115c0565b91506112d4826117e1565b602082019050919050565b60006112ec6003836115c0565b91506112f78261180a565b602082019050919050565b61130b81611655565b82525050565b600061131e8284866111da565b91508190509392505050565b600061133682846111ff565b915081905092915050565b6000602082019050611356600083018461119e565b92915050565b6000606082019050611371600083018661119e565b61137e602083018561119e565b61138b6040830184611302565b949350505050565b600060a0820190506113a8600083018961119e565b6113b5602083018861119e565b6113c26040830187611302565b6113cf6060830186611302565b81810360808301526113e28184866111ad565b9050979650505050505050565b6000604082019050611404600083018561119e565b6114116020830184611302565b9392505050565b6000602082019050818103600083015261143181611230565b9050919050565b6000602082019050818103600083015261145181611253565b9050919050565b6000602082019050818103600083015261147181611276565b9050919050565b6000602082019050818103600083015261149181611299565b9050919050565b600060208201905081810360008301526114b1816112bc565b9050919050565b600060208201905081810360008301526114d1816112df565b9050919050565b600060c0820190506114ed600083018a611302565b6114fa602083018961119e565b611507604083018861119e565b611514606083018761119e565b611521608083018661118f565b81810360a08301526115348184866111ad565b905098975050505050505050565b6000808335600160200384360303811261155b57600080fd5b80840192508235915067ffffffffffffffff82111561157957600080fd5b60208301925060018202360383131561159157600080fd5b509250929050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006115dc82611655565b91506115e783611655565b9250828210156115fa576115f96116d7565b5b828203905092915050565b600061161082611635565b9050919050565b600061162282611635565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061166a82611671565b9050919050565b600061167c82611683565b9050919050565b600061168e82611635565b9050919050565b82818337600083830152505050565b60005b838110156116c25780820151818401526020810190506116a7565b838111156116d1576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b7f53574150204641494c4544000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b61183c81611605565b811461184757600080fd5b50565b61185381611617565b811461185e57600080fd5b50565b61186a81611629565b811461187557600080fd5b50565b61188181611655565b811461188c57600080fd5b5056fea2646970667358221220034e12230a6aab5beb639fa6ab2e388c15531ff03766f020d6411d322fd60c2264736f6c63430008010033",
  "deployedBytecode": "0x6080604052600436106100555760003560e01c806334ca2b511461005a578063715018a6146100765780638da5cb5b1461008d578063c3a2a665146100b8578063e958a77e146100e1578063f2fde38b146100fd575b600080fd5b610074600480360381019061006f91906110e4565b610126565b005b34801561008257600080fd5b5061008b610592565b005b34801561009957600080fd5b506100a261061a565b6040516100af9190611341565b60405180910390f35b3480156100c457600080fd5b506100df60048036038101906100da9190610fef565b610643565b005b6100fb60048036038101906100f69190611054565b6106ce565b005b34801561010957600080fd5b50610124600480360381019061011f9190610f9d565b610938565b005b61014483600001602081019061013c9190610f9d565b333087610a30565b61017383600001602081019061015a9190610f9d565b84604001602081019061016d9190610fc6565b86610b88565b60008360200160208101906101889190610f9d565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016101c09190611341565b60206040518083038186803b1580156101d857600080fd5b505afa1580156101ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021091906110bb565b905060008460400160208101906102279190610fc6565b73ffffffffffffffffffffffffffffffffffffffff163486806060019061024e9190611542565b60405161025c929190611311565b60006040518083038185875af1925050503d8060008114610299576040519150601f19603f3d011682016040523d82523d6000602084013e61029e565b606091505b50509050806102e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d990611438565b60405180910390fd5b818560200160208101906102f69190610f9d565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161032e9190611341565b60206040518083038186803b15801561034657600080fd5b505afa15801561035a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037e91906110bb565b61038891906115d1565b91506000600160008060008111156103c9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061041d8460000160208101906104169190610f9d565b8285610b88565b8073ffffffffffffffffffffffffffffffffffffffff1663148f2d1185600001602081019061044c9190610f9d565b308688602001358980604001906104639190611542565b6040518763ffffffff1660e01b815260040161048496959493929190611393565b600060405180830381600087803b15801561049e57600080fd5b505af11580156104b2573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156104fc573d6000803e3d6000fd5b5083602001357f0b737671bd385ef5037921d101c15434519b4c49d42afb9861cbbf022944e2fe84338860000160208101906105389190610f9d565b89602001602081019061054b9190610f9d565b8a604001602081019061055e9190610fc6565b8b806060019061056e9190611542565b60405161058197969594939291906114d8565b60405180910390a250505050505050565b61059a610cdd565b73ffffffffffffffffffffffffffffffffffffffff166105b861061a565b73ffffffffffffffffffffffffffffffffffffffff161461060e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060590611498565b60405180910390fd5b6106186000610ce5565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61064b610cdd565b73ffffffffffffffffffffffffffffffffffffffff1661066961061a565b73ffffffffffffffffffffffffffffffffffffffff16146106bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b690611498565b60405180910390fd5b6106ca823383610da9565b5050565b6106fd8360000160208101906106e49190610f9d565b8460400160208101906106f79190610fc6565b84610b88565b60008360200160208101906107129190610f9d565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161074a9190611341565b60206040518083038186803b15801561076257600080fd5b505afa158015610776573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061079a91906110bb565b905060008460400160208101906107b19190610fc6565b73ffffffffffffffffffffffffffffffffffffffff16348680606001906107d89190611542565b6040516107e6929190611311565b60006040518083038185875af1925050503d8060008114610823576040519150601f19603f3d011682016040523d82523d6000602084013e610828565b606091505b505090508061086c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086390611438565b60405180910390fd5b818560200160208101906108809190610f9d565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108b89190611341565b60206040518083038186803b1580156108d057600080fd5b505afa1580156108e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090891906110bb565b61091291906115d1565b915061093185602001602081019061092a9190610f9d565b8484610da9565b5050505050565b610940610cdd565b73ffffffffffffffffffffffffffffffffffffffff1661095e61061a565b73ffffffffffffffffffffffffffffffffffffffff16146109b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ab90611498565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1b90611458565b60405180910390fd5b610a2d81610ce5565b50565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b868686604051602401610a679392919061135c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610ad1919061132a565b6000604051808303816000865af19150503d8060008114610b0e576040519150601f19603f3d011682016040523d82523d6000602084013e610b13565b606091505b5091509150818015610b415750600081511480610b40575080806020019051810190610b3f919061102b565b5b5b610b80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b77906114b8565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b8585604051602401610bbd9291906113ef565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610c27919061132a565b6000604051808303816000865af19150503d8060008114610c64576040519150601f19603f3d011682016040523d82523d6000602084013e610c69565b606091505b5091509150818015610c975750600081511480610c96575080806020019051810190610c95919061102b565b5b5b610cd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ccd90611418565b60405180910390fd5b5050505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8585604051602401610dde9291906113ef565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610e48919061132a565b6000604051808303816000865af19150503d8060008114610e85576040519150601f19603f3d011682016040523d82523d6000602084013e610e8a565b606091505b5091509150818015610eb85750600081511480610eb7575080806020019051810190610eb6919061102b565b5b5b610ef7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eee90611478565b60405180910390fd5b5050505050565b600081359050610f0d81611833565b92915050565b600081359050610f228161184a565b92915050565b600081519050610f3781611861565b92915050565b600060608284031215610f4f57600080fd5b81905092915050565b600060808284031215610f6a57600080fd5b81905092915050565b600081359050610f8281611878565b92915050565b600081519050610f9781611878565b92915050565b600060208284031215610faf57600080fd5b6000610fbd84828501610efe565b91505092915050565b600060208284031215610fd857600080fd5b6000610fe684828501610f13565b91505092915050565b6000806040838503121561100257600080fd5b600061101085828601610efe565b925050602061102185828601610f73565b9150509250929050565b60006020828403121561103d57600080fd5b600061104b84828501610f28565b91505092915050565b60008060006060848603121561106957600080fd5b600084013567ffffffffffffffff81111561108357600080fd5b61108f86828701610f58565b93505060206110a086828701610f73565b92505060406110b186828701610efe565b9150509250925092565b6000602082840312156110cd57600080fd5b60006110db84828501610f88565b91505092915050565b600080600080608085870312156110fa57600080fd5b600061110887828801610f73565b945050602085013567ffffffffffffffff81111561112557600080fd5b61113187828801610f58565b935050604085013567ffffffffffffffff81111561114e57600080fd5b61115a87828801610f58565b925050606085013567ffffffffffffffff81111561117757600080fd5b61118387828801610f3d565b91505092959194509250565b6111988161165f565b82525050565b6111a781611605565b82525050565b60006111b983856115a4565b93506111c6838584611695565b6111cf83611706565b840190509392505050565b60006111e683856115b5565b93506111f3838584611695565b82840190509392505050565b600061120a82611599565b61121481856115b5565b93506112248185602086016116a4565b80840191505092915050565b600061123d6002836115c0565b915061124882611717565b602082019050919050565b6000611260600b836115c0565b915061126b82611740565b602082019050919050565b60006112836026836115c0565b915061128e82611769565b604082019050919050565b60006112a66002836115c0565b91506112b1826117b8565b602082019050919050565b60006112c96020836115c0565b91506112d4826117e1565b602082019050919050565b60006112ec6003836115c0565b91506112f78261180a565b602082019050919050565b61130b81611655565b82525050565b600061131e8284866111da565b91508190509392505050565b600061133682846111ff565b915081905092915050565b6000602082019050611356600083018461119e565b92915050565b6000606082019050611371600083018661119e565b61137e602083018561119e565b61138b6040830184611302565b949350505050565b600060a0820190506113a8600083018961119e565b6113b5602083018861119e565b6113c26040830187611302565b6113cf6060830186611302565b81810360808301526113e28184866111ad565b9050979650505050505050565b6000604082019050611404600083018561119e565b6114116020830184611302565b9392505050565b6000602082019050818103600083015261143181611230565b9050919050565b6000602082019050818103600083015261145181611253565b9050919050565b6000602082019050818103600083015261147181611276565b9050919050565b6000602082019050818103600083015261149181611299565b9050919050565b600060208201905081810360008301526114b1816112bc565b9050919050565b600060208201905081810360008301526114d1816112df565b9050919050565b600060c0820190506114ed600083018a611302565b6114fa602083018961119e565b611507604083018861119e565b611514606083018761119e565b611521608083018661118f565b81810360a08301526115348184866111ad565b905098975050505050505050565b6000808335600160200384360303811261155b57600080fd5b80840192508235915067ffffffffffffffff82111561157957600080fd5b60208301925060018202360383131561159157600080fd5b509250929050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006115dc82611655565b91506115e783611655565b9250828210156115fa576115f96116d7565b5b828203905092915050565b600061161082611635565b9050919050565b600061162282611635565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061166a82611671565b9050919050565b600061167c82611683565b9050919050565b600061168e82611635565b9050919050565b82818337600083830152505050565b60005b838110156116c25780820151818401526020810190506116a7565b838111156116d1576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b7f53574150204641494c4544000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b61183c81611605565b811461184757600080fd5b50565b61185381611617565b811461185e57600080fd5b50565b61186a81611629565b811461187557600080fd5b50565b61188181611655565b811461188c57600080fd5b5056fea2646970667358221220034e12230a6aab5beb639fa6ab2e388c15531ff03766f020d6411d322fd60c2264736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_anyswapRouterAddress": "Address of the default bridge"
        }
      },
      "initTokensCross(uint256,(address,address,address,bytes),(address,address,address,bytes),(address,uint256,bytes))": {
        "details": "This function is executed on the origin chain"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "finalizeTokenCross((address,address,address,bytes),uint256,address)": {
        "notice": "Finalize the process of swidging"
      },
      "initTokensCross(uint256,(address,address,address,bytes),(address,address,address,bytes),(address,uint256,bytes))": {
        "notice": "Init the process of swidging"
      },
      "retrieve(address,uint256)": {
        "notice": "To retrieve any tokens that got stuck on the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Router.sol:Router",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 503,
        "contract": "contracts/Router.sol:Router",
        "label": "bridgeProviders",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint8,t_contract(IBridge)972)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IBridge)972": {
        "encoding": "inplace",
        "label": "contract IBridge",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint8,t_contract(IBridge)972)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => contract IBridge)",
        "numberOfBytes": "32",
        "value": "t_contract(IBridge)972"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}