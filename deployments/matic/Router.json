{
  "address": "0x40acD8E666a4e4efE39330DE28A8A7D1281B4FB7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_anyswapRouterAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dstTokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dstTokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "CrossInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "callAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Router.SwapData",
          "name": "_swapData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "finalizeTokenCross",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_srcAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "callAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Router.SwapData",
          "name": "_srcSwapData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "callAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Router.SwapData",
          "name": "_dstSwapData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiverAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "toChainId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Router.BridgeData",
          "name": "_bridgeData",
          "type": "tuple"
        }
      ],
      "name": "initTokensCross",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "retrieve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcd015f5387d312de27de732671bf1a841f03f6312394887e92d67748a3f7b9b7",
  "receipt": {
    "to": null,
    "from": "0x335e2912D888F76326e806C666B690Df2D886D07",
    "contractAddress": "0x40acD8E666a4e4efE39330DE28A8A7D1281B4FB7",
    "transactionIndex": 161,
    "gasUsed": "1488014",
    "logsBloom": "0x
    "blockHash": "0x44751fa008d745d8cd77f60185ae05049e195f6d1d4a5517bf8933f9b7b60a60",
    "transactionHash": "0xcd015f5387d312de27de732671bf1a841f03f6312394887e92d67748a3f7b9b7",
    "logs": [
      {
        "transactionIndex": 161,
        "blockNumber": 27237120,
        "transactionHash": "0xcd015f5387d312de27de732671bf1a841f03f6312394887e92d67748a3f7b9b7",
        "address": "0x40acD8E666a4e4efE39330DE28A8A7D1281B4FB7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000335e2912d888f76326e806c666b690df2d886d07"
        ],
        "data": "0x",
        "logIndex": 568,
        "blockHash": "0x44751fa008d745d8cd77f60185ae05049e195f6d1d4a5517bf8933f9b7b60a60"
      },
      {
        "transactionIndex": 161,
        "blockNumber": 27237120,
        "transactionHash": "0xcd015f5387d312de27de732671bf1a841f03f6312394887e92d67748a3f7b9b7",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000335e2912d888f76326e806c666b690df2d886d07",
          "0x00000000000000000000000026c80cc193b27d73d2c40943acec77f4da2c5bd8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000a92ae83a77473e000000000000000000000000000000000000000000000000260ac61b913faecc000000000000000000000000000000000000000000001b5c2c8a7a9db5ce7a0100000000000000000000000000000000000000000000000025619b3356c8678e000000000000000000000000000000000000000000001b5c2d33a585f045c13f",
        "logIndex": 569,
        "blockHash": "0x44751fa008d745d8cd77f60185ae05049e195f6d1d4a5517bf8933f9b7b60a60"
      }
    ],
    "blockNumber": 27237120,
    "cumulativeGasUsed": "26113120",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa6318769cEfcAd7454c69bb47D864375ac286e89"
  ],
  "numDeployments": 2,
  "solcInputHash": "10ccea8ac4a16492edf2d1aec78362aa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_anyswapRouterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstTokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstTokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"CrossInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"callAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Router.SwapData\",\"name\":\"_swapData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"finalizeTokenCross\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_srcAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"callAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Router.SwapData\",\"name\":\"_srcSwapData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"callAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Router.SwapData\",\"name\":\"_dstSwapData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Router.BridgeData\",\"name\":\"_bridgeData\",\"type\":\"tuple\"}],\"name\":\"initTokensCross\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"retrieve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_anyswapRouterAddress\":\"Address of the default bridge\"}},\"initTokensCross(uint256,(address,address,address,bytes),(address,address,address,bytes),(address,address,uint256,bytes))\":{\"details\":\"This function is executed on the origin chain\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"finalizeTokenCross((address,address,address,bytes),uint256,address)\":{\"notice\":\"Finalize the process of swidging\"},\"initTokensCross(uint256,(address,address,address,bytes),(address,address,address,bytes),(address,address,uint256,bytes))\":{\"notice\":\"Init the process of swidging\"},\"retrieve(address,uint256)\":{\"notice\":\"To retrieve any tokens that got stuck on the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Router.sol\":\"Router\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Router.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"./dexs/IDEX.sol\\\";\\nimport \\\"./bridge/IBridge.sol\\\";\\n\\ncontract Router is Ownable {\\n    mapping(uint8 => IBridge) private bridgeProviders;\\n\\n    enum bridgeCode {\\n        Anyswap // 0\\n    }\\n\\n    /// @param _anyswapRouterAddress Address of the default bridge\\n    constructor(address _anyswapRouterAddress) {\\n        bridgeProviders[uint8(bridgeCode.Anyswap)] = IBridge(_anyswapRouterAddress);\\n    }\\n\\n    struct SwapData {\\n        address tokenIn;\\n        address tokenOut;\\n        address payable callAddress;\\n        bytes callData;\\n    }\\n\\n    struct BridgeData {\\n        address tokenIn;\\n        address receiverAddress;\\n        uint256 toChainId;\\n        bytes data;\\n    }\\n\\n    event CrossInitiated(\\n        uint256 amount,\\n        uint256 indexed toChainId,\\n        address indexed router,\\n        address user,\\n        address dstTokenIn,\\n        address dstTokenOut,\\n        address maker,\\n        bytes data\\n    );\\n\\n    /// Init the process of swidging\\n    /// @dev This function is executed on the origin chain\\n    function initTokensCross(\\n        uint256 _srcAmount,\\n        SwapData calldata _srcSwapData,\\n        SwapData calldata _dstSwapData,\\n        BridgeData calldata _bridgeData\\n    ) external payable {\\n        // Take ownership of user's tokens\\n        TransferHelper.safeTransferFrom(\\n            _srcSwapData.tokenIn,\\n            msg.sender,\\n            address(this),\\n            _srcAmount\\n        );\\n\\n        // Approve to ZeroEx\\n        TransferHelper.safeApprove(\\n            _srcSwapData.tokenIn,\\n            _srcSwapData.callAddress,\\n            _srcAmount\\n        );\\n\\n        // Execute swap with ZeroEx and compute final `boughtAmount`\\n        uint256 boughtAmount = IERC20(_srcSwapData.tokenOut).balanceOf(address(this));\\n        (bool success,) = _srcSwapData.callAddress.call{value : msg.value}(_srcSwapData.callData);\\n        require(success, \\\"SWAP FAILED\\\");\\n        boughtAmount = IERC20(_srcSwapData.tokenOut).balanceOf(address(this)) - boughtAmount;\\n\\n        // Load selected bridge provider\\n        IBridge bridge = bridgeProviders[uint8(bridgeCode.Anyswap)];\\n\\n        // Approve tokens for the bridge to take\\n        TransferHelper.safeApprove(\\n            _bridgeData.tokenIn,\\n            address(bridge),\\n            boughtAmount\\n        );\\n\\n        // Execute bridge process\\n        bridge.send(\\n            _bridgeData.tokenIn,\\n            address(this),\\n            _bridgeData.receiverAddress,\\n            boughtAmount,\\n            _bridgeData.toChainId,\\n            _bridgeData.data\\n        );\\n\\n        // Refund any unspent protocol fees to the sender.\\n        payable(msg.sender).transfer(address(this).balance);\\n\\n        // Emit event for relayer\\n        emit CrossInitiated(\\n            boughtAmount,\\n            _bridgeData.toChainId,\\n            _bridgeData.receiverAddress,\\n            msg.sender,\\n            _dstSwapData.tokenIn,\\n            _dstSwapData.tokenOut,\\n            _dstSwapData.callAddress,\\n            _dstSwapData.callData\\n        );\\n    }\\n\\n    /// Finalize the process of swidging\\n    function finalizeTokenCross(\\n        SwapData calldata _swapData,\\n        uint256 _amount,\\n        address _receiver\\n    ) external payable {\\n        // Approve to ZeroEx\\n        TransferHelper.safeApprove(\\n            _swapData.tokenIn,\\n            _swapData.callAddress,\\n            _amount\\n        );\\n\\n        // Execute swap with ZeroEx and compute final `boughtAmount`\\n        uint256 boughtAmount = IERC20(_swapData.tokenOut).balanceOf(address(this));\\n        (bool success,) = _swapData.callAddress.call{value : msg.value}(_swapData.callData);\\n        require(success, \\\"SWAP FAILED\\\");\\n        boughtAmount = IERC20(_swapData.tokenOut).balanceOf(address(this)) - boughtAmount;\\n\\n        // Send tokens to the user\\n        TransferHelper.safeTransfer(\\n            _swapData.tokenOut,\\n            _receiver,\\n            boughtAmount\\n        );\\n    }\\n\\n    /// To retrieve any tokens that got stuck on the contract\\n    function retrieve(address _token, uint256 _amount) external onlyOwner {\\n        TransferHelper.safeTransfer(_token, msg.sender, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x04206086f4d1523f4c01f0ad9a60b15b08ade5c0d71cdfcfe72565a923dde807\",\"license\":\"MIT\"},\"contracts/bridge/IBridge.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\n\\nabstract contract IBridge is Ownable {\\n    address private router;\\n\\n    modifier onlyRouter() {\\n        require(msg.sender == router, \\\"Unauthorized caller\\\");\\n        _;\\n    }\\n\\n    event UpdatedRouter(address indexed routerAddress);\\n\\n    function updateRouter(address routerAddress) external onlyOwner {\\n        router = routerAddress;\\n        emit UpdatedRouter(routerAddress);\\n    }\\n\\n    function retrieve(address _token, uint256 _amount) external onlyOwner {\\n        TransferHelper.safeTransfer(_token, msg.sender, _amount);\\n    }\\n\\n    function send(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _toChainId,\\n        bytes calldata _data\\n    ) external virtual;\\n}\\n\",\"keccak256\":\"0xcb4e6029d02bbb86df23944424c30648218b657e20c95225fab1c0cff6d2b6c3\",\"license\":\"MIT\"},\"contracts/dexs/IDEX.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IDEX {\\n\\n    function custodianAddress() external view returns (address);\\n\\n    function swap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        bytes calldata _data\\n    ) external returns (uint256 amountOut);\\n\\n}\\n\\n\",\"keccak256\":\"0x06626777c519b05b3c42d479b547db1ff05f0fac2680df43eda38f7b4ac2c53e\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001b6c38038062001b6c8339818101604052810190620000379190620001d2565b620000576200004b620000ef60201b60201c565b620000f760201b60201c565b806001600080600081111562000096577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60ff1660ff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200024c565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050620001cc8162000232565b92915050565b600060208284031215620001e557600080fd5b6000620001f584828501620001bb565b91505092915050565b60006200020b8262000212565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200023d81620001fe565b81146200024957600080fd5b50565b611910806200025c6000396000f3fe6080604052600436106100555760003560e01c8063715018a61461005a5780638da5cb5b14610071578063b07dc49b1461009c578063c3a2a665146100b8578063e958a77e146100e1578063f2fde38b146100fd575b600080fd5b34801561006657600080fd5b5061006f610126565b005b34801561007d57600080fd5b506100866101ae565b604051610093919061137e565b60405180910390f35b6100b660048036038101906100b19190611121565b6101d7565b005b3480156100c457600080fd5b506100df60048036038101906100da919061102c565b610680565b005b6100fb60048036038101906100f69190611091565b61070b565b005b34801561010957600080fd5b50610124600480360381019061011f9190610fda565b610975565b005b61012e610a6d565b73ffffffffffffffffffffffffffffffffffffffff1661014c6101ae565b73ffffffffffffffffffffffffffffffffffffffff16146101a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610199906114e3565b60405180910390fd5b6101ac6000610a75565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6101f58360000160208101906101ed9190610fda565b333087610b39565b61022483600001602081019061020b9190610fda565b84604001602081019061021e9190611003565b86610c91565b60008360200160208101906102399190610fda565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610271919061137e565b60206040518083038186803b15801561028957600080fd5b505afa15801561029d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c191906110f8565b905060008460400160208101906102d89190611003565b73ffffffffffffffffffffffffffffffffffffffff16348680606001906102ff919061158d565b60405161030d92919061134e565b60006040518083038185875af1925050503d806000811461034a576040519150601f19603f3d011682016040523d82523d6000602084013e61034f565b606091505b5050905080610393576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038a90611483565b60405180910390fd5b818560200160208101906103a79190610fda565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103df919061137e565b60206040518083038186803b1580156103f757600080fd5b505afa15801561040b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042f91906110f8565b610439919061161c565b915060006001600080600081111561047a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506104ce8460000160208101906104c79190610fda565b8285610c91565b8073ffffffffffffffffffffffffffffffffffffffff1663da1c7e8c8560000160208101906104fd9190610fda565b308760200160208101906105119190610fda565b8789604001358a8060600190610527919061158d565b6040518863ffffffff1660e01b81526004016105499796959493929190611399565b600060405180830381600087803b15801561056357600080fd5b505af1158015610577573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156105c1573d6000803e3d6000fd5b508360200160208101906105d59190610fda565b73ffffffffffffffffffffffffffffffffffffffff1684604001357f5ef78badbd957879a0891ffc9d843ae28b6aacd3cfa025058f3e52cd029e98c185338960000160208101906106269190610fda565b8a60200160208101906106399190610fda565b8b604001602081019061064c9190611003565b8c806060019061065c919061158d565b60405161066f9796959493929190611523565b60405180910390a350505050505050565b610688610a6d565b73ffffffffffffffffffffffffffffffffffffffff166106a66101ae565b73ffffffffffffffffffffffffffffffffffffffff16146106fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f3906114e3565b60405180910390fd5b610707823383610de6565b5050565b61073a8360000160208101906107219190610fda565b8460400160208101906107349190611003565b84610c91565b600083602001602081019061074f9190610fda565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610787919061137e565b60206040518083038186803b15801561079f57600080fd5b505afa1580156107b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d791906110f8565b905060008460400160208101906107ee9190611003565b73ffffffffffffffffffffffffffffffffffffffff1634868060600190610815919061158d565b60405161082392919061134e565b60006040518083038185875af1925050503d8060008114610860576040519150601f19603f3d011682016040523d82523d6000602084013e610865565b606091505b50509050806108a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a090611483565b60405180910390fd5b818560200160208101906108bd9190610fda565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108f5919061137e565b60206040518083038186803b15801561090d57600080fd5b505afa158015610921573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094591906110f8565b61094f919061161c565b915061096e8560200160208101906109679190610fda565b8484610de6565b5050505050565b61097d610a6d565b73ffffffffffffffffffffffffffffffffffffffff1661099b6101ae565b73ffffffffffffffffffffffffffffffffffffffff16146109f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e8906114e3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a58906114a3565b60405180910390fd5b610a6a81610a75565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b868686604051602401610b7093929190611403565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610bda9190611367565b6000604051808303816000865af19150503d8060008114610c17576040519150601f19603f3d011682016040523d82523d6000602084013e610c1c565b606091505b5091509150818015610c4a5750600081511480610c49575080806020019051810190610c489190611068565b5b5b610c89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8090611503565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b8585604051602401610cc692919061143a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610d309190611367565b6000604051808303816000865af19150503d8060008114610d6d576040519150601f19603f3d011682016040523d82523d6000602084013e610d72565b606091505b5091509150818015610da05750600081511480610d9f575080806020019051810190610d9e9190611068565b5b5b610ddf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd690611463565b60405180910390fd5b5050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8585604051602401610e1b92919061143a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610e859190611367565b6000604051808303816000865af19150503d8060008114610ec2576040519150601f19603f3d011682016040523d82523d6000602084013e610ec7565b606091505b5091509150818015610ef55750600081511480610ef4575080806020019051810190610ef39190611068565b5b5b610f34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2b906114c3565b60405180910390fd5b5050505050565b600081359050610f4a8161187e565b92915050565b600081359050610f5f81611895565b92915050565b600081519050610f74816118ac565b92915050565b600060808284031215610f8c57600080fd5b81905092915050565b600060808284031215610fa757600080fd5b81905092915050565b600081359050610fbf816118c3565b92915050565b600081519050610fd4816118c3565b92915050565b600060208284031215610fec57600080fd5b6000610ffa84828501610f3b565b91505092915050565b60006020828403121561101557600080fd5b600061102384828501610f50565b91505092915050565b6000806040838503121561103f57600080fd5b600061104d85828601610f3b565b925050602061105e85828601610fb0565b9150509250929050565b60006020828403121561107a57600080fd5b600061108884828501610f65565b91505092915050565b6000806000606084860312156110a657600080fd5b600084013567ffffffffffffffff8111156110c057600080fd5b6110cc86828701610f95565b93505060206110dd86828701610fb0565b92505060406110ee86828701610f3b565b9150509250925092565b60006020828403121561110a57600080fd5b600061111884828501610fc5565b91505092915050565b6000806000806080858703121561113757600080fd5b600061114587828801610fb0565b945050602085013567ffffffffffffffff81111561116257600080fd5b61116e87828801610f95565b935050604085013567ffffffffffffffff81111561118b57600080fd5b61119787828801610f95565b925050606085013567ffffffffffffffff8111156111b457600080fd5b6111c087828801610f7a565b91505092959194509250565b6111d5816116aa565b82525050565b6111e481611650565b82525050565b60006111f683856115ef565b93506112038385846116e0565b61120c83611751565b840190509392505050565b60006112238385611600565b93506112308385846116e0565b82840190509392505050565b6000611247826115e4565b6112518185611600565b93506112618185602086016116ef565b80840191505092915050565b600061127a60028361160b565b915061128582611762565b602082019050919050565b600061129d600b8361160b565b91506112a88261178b565b602082019050919050565b60006112c060268361160b565b91506112cb826117b4565b604082019050919050565b60006112e360028361160b565b91506112ee82611803565b602082019050919050565b600061130660208361160b565b91506113118261182c565b602082019050919050565b600061132960038361160b565b915061133482611855565b602082019050919050565b611348816116a0565b82525050565b600061135b828486611217565b91508190509392505050565b6000611373828461123c565b915081905092915050565b600060208201905061139360008301846111db565b92915050565b600060c0820190506113ae600083018a6111db565b6113bb60208301896111db565b6113c860408301886111db565b6113d5606083018761133f565b6113e2608083018661133f565b81810360a08301526113f58184866111ea565b905098975050505050505050565b600060608201905061141860008301866111db565b61142560208301856111db565b611432604083018461133f565b949350505050565b600060408201905061144f60008301856111db565b61145c602083018461133f565b9392505050565b6000602082019050818103600083015261147c8161126d565b9050919050565b6000602082019050818103600083015261149c81611290565b9050919050565b600060208201905081810360008301526114bc816112b3565b9050919050565b600060208201905081810360008301526114dc816112d6565b9050919050565b600060208201905081810360008301526114fc816112f9565b9050919050565b6000602082019050818103600083015261151c8161131c565b9050919050565b600060c082019050611538600083018a61133f565b61154560208301896111db565b61155260408301886111db565b61155f60608301876111db565b61156c60808301866111cc565b81810360a083015261157f8184866111ea565b905098975050505050505050565b600080833560016020038436030381126115a657600080fd5b80840192508235915067ffffffffffffffff8211156115c457600080fd5b6020830192506001820236038313156115dc57600080fd5b509250929050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000611627826116a0565b9150611632836116a0565b92508282101561164557611644611722565b5b828203905092915050565b600061165b82611680565b9050919050565b600061166d82611680565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006116b5826116bc565b9050919050565b60006116c7826116ce565b9050919050565b60006116d982611680565b9050919050565b82818337600083830152505050565b60005b8381101561170d5780820151818401526020810190506116f2565b8381111561171c576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b7f53574150204641494c4544000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b61188781611650565b811461189257600080fd5b50565b61189e81611662565b81146118a957600080fd5b50565b6118b581611674565b81146118c057600080fd5b50565b6118cc816116a0565b81146118d757600080fd5b5056fea2646970667358221220b56b2eb2d30b8a2a6b1d4c8497f1b89a3596e087faca66987d6f30f119481f2364736f6c63430008010033",
  "deployedBytecode": "0x6080604052600436106100555760003560e01c8063715018a61461005a5780638da5cb5b14610071578063b07dc49b1461009c578063c3a2a665146100b8578063e958a77e146100e1578063f2fde38b146100fd575b600080fd5b34801561006657600080fd5b5061006f610126565b005b34801561007d57600080fd5b506100866101ae565b604051610093919061137e565b60405180910390f35b6100b660048036038101906100b19190611121565b6101d7565b005b3480156100c457600080fd5b506100df60048036038101906100da919061102c565b610680565b005b6100fb60048036038101906100f69190611091565b61070b565b005b34801561010957600080fd5b50610124600480360381019061011f9190610fda565b610975565b005b61012e610a6d565b73ffffffffffffffffffffffffffffffffffffffff1661014c6101ae565b73ffffffffffffffffffffffffffffffffffffffff16146101a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610199906114e3565b60405180910390fd5b6101ac6000610a75565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6101f58360000160208101906101ed9190610fda565b333087610b39565b61022483600001602081019061020b9190610fda565b84604001602081019061021e9190611003565b86610c91565b60008360200160208101906102399190610fda565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610271919061137e565b60206040518083038186803b15801561028957600080fd5b505afa15801561029d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c191906110f8565b905060008460400160208101906102d89190611003565b73ffffffffffffffffffffffffffffffffffffffff16348680606001906102ff919061158d565b60405161030d92919061134e565b60006040518083038185875af1925050503d806000811461034a576040519150601f19603f3d011682016040523d82523d6000602084013e61034f565b606091505b5050905080610393576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038a90611483565b60405180910390fd5b818560200160208101906103a79190610fda565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103df919061137e565b60206040518083038186803b1580156103f757600080fd5b505afa15801561040b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042f91906110f8565b610439919061161c565b915060006001600080600081111561047a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506104ce8460000160208101906104c79190610fda565b8285610c91565b8073ffffffffffffffffffffffffffffffffffffffff1663da1c7e8c8560000160208101906104fd9190610fda565b308760200160208101906105119190610fda565b8789604001358a8060600190610527919061158d565b6040518863ffffffff1660e01b81526004016105499796959493929190611399565b600060405180830381600087803b15801561056357600080fd5b505af1158015610577573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156105c1573d6000803e3d6000fd5b508360200160208101906105d59190610fda565b73ffffffffffffffffffffffffffffffffffffffff1684604001357f5ef78badbd957879a0891ffc9d843ae28b6aacd3cfa025058f3e52cd029e98c185338960000160208101906106269190610fda565b8a60200160208101906106399190610fda565b8b604001602081019061064c9190611003565b8c806060019061065c919061158d565b60405161066f9796959493929190611523565b60405180910390a350505050505050565b610688610a6d565b73ffffffffffffffffffffffffffffffffffffffff166106a66101ae565b73ffffffffffffffffffffffffffffffffffffffff16146106fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f3906114e3565b60405180910390fd5b610707823383610de6565b5050565b61073a8360000160208101906107219190610fda565b8460400160208101906107349190611003565b84610c91565b600083602001602081019061074f9190610fda565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610787919061137e565b60206040518083038186803b15801561079f57600080fd5b505afa1580156107b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d791906110f8565b905060008460400160208101906107ee9190611003565b73ffffffffffffffffffffffffffffffffffffffff1634868060600190610815919061158d565b60405161082392919061134e565b60006040518083038185875af1925050503d8060008114610860576040519150601f19603f3d011682016040523d82523d6000602084013e610865565b606091505b50509050806108a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a090611483565b60405180910390fd5b818560200160208101906108bd9190610fda565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108f5919061137e565b60206040518083038186803b15801561090d57600080fd5b505afa158015610921573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094591906110f8565b61094f919061161c565b915061096e8560200160208101906109679190610fda565b8484610de6565b5050505050565b61097d610a6d565b73ffffffffffffffffffffffffffffffffffffffff1661099b6101ae565b73ffffffffffffffffffffffffffffffffffffffff16146109f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e8906114e3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a58906114a3565b60405180910390fd5b610a6a81610a75565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b868686604051602401610b7093929190611403565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610bda9190611367565b6000604051808303816000865af19150503d8060008114610c17576040519150601f19603f3d011682016040523d82523d6000602084013e610c1c565b606091505b5091509150818015610c4a5750600081511480610c49575080806020019051810190610c489190611068565b5b5b610c89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8090611503565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b8585604051602401610cc692919061143a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610d309190611367565b6000604051808303816000865af19150503d8060008114610d6d576040519150601f19603f3d011682016040523d82523d6000602084013e610d72565b606091505b5091509150818015610da05750600081511480610d9f575080806020019051810190610d9e9190611068565b5b5b610ddf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd690611463565b60405180910390fd5b5050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8585604051602401610e1b92919061143a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610e859190611367565b6000604051808303816000865af19150503d8060008114610ec2576040519150601f19603f3d011682016040523d82523d6000602084013e610ec7565b606091505b5091509150818015610ef55750600081511480610ef4575080806020019051810190610ef39190611068565b5b5b610f34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2b906114c3565b60405180910390fd5b5050505050565b600081359050610f4a8161187e565b92915050565b600081359050610f5f81611895565b92915050565b600081519050610f74816118ac565b92915050565b600060808284031215610f8c57600080fd5b81905092915050565b600060808284031215610fa757600080fd5b81905092915050565b600081359050610fbf816118c3565b92915050565b600081519050610fd4816118c3565b92915050565b600060208284031215610fec57600080fd5b6000610ffa84828501610f3b565b91505092915050565b60006020828403121561101557600080fd5b600061102384828501610f50565b91505092915050565b6000806040838503121561103f57600080fd5b600061104d85828601610f3b565b925050602061105e85828601610fb0565b9150509250929050565b60006020828403121561107a57600080fd5b600061108884828501610f65565b91505092915050565b6000806000606084860312156110a657600080fd5b600084013567ffffffffffffffff8111156110c057600080fd5b6110cc86828701610f95565b93505060206110dd86828701610fb0565b92505060406110ee86828701610f3b565b9150509250925092565b60006020828403121561110a57600080fd5b600061111884828501610fc5565b91505092915050565b6000806000806080858703121561113757600080fd5b600061114587828801610fb0565b945050602085013567ffffffffffffffff81111561116257600080fd5b61116e87828801610f95565b935050604085013567ffffffffffffffff81111561118b57600080fd5b61119787828801610f95565b925050606085013567ffffffffffffffff8111156111b457600080fd5b6111c087828801610f7a565b91505092959194509250565b6111d5816116aa565b82525050565b6111e481611650565b82525050565b60006111f683856115ef565b93506112038385846116e0565b61120c83611751565b840190509392505050565b60006112238385611600565b93506112308385846116e0565b82840190509392505050565b6000611247826115e4565b6112518185611600565b93506112618185602086016116ef565b80840191505092915050565b600061127a60028361160b565b915061128582611762565b602082019050919050565b600061129d600b8361160b565b91506112a88261178b565b602082019050919050565b60006112c060268361160b565b91506112cb826117b4565b604082019050919050565b60006112e360028361160b565b91506112ee82611803565b602082019050919050565b600061130660208361160b565b91506113118261182c565b602082019050919050565b600061132960038361160b565b915061133482611855565b602082019050919050565b611348816116a0565b82525050565b600061135b828486611217565b91508190509392505050565b6000611373828461123c565b915081905092915050565b600060208201905061139360008301846111db565b92915050565b600060c0820190506113ae600083018a6111db565b6113bb60208301896111db565b6113c860408301886111db565b6113d5606083018761133f565b6113e2608083018661133f565b81810360a08301526113f58184866111ea565b905098975050505050505050565b600060608201905061141860008301866111db565b61142560208301856111db565b611432604083018461133f565b949350505050565b600060408201905061144f60008301856111db565b61145c602083018461133f565b9392505050565b6000602082019050818103600083015261147c8161126d565b9050919050565b6000602082019050818103600083015261149c81611290565b9050919050565b600060208201905081810360008301526114bc816112b3565b9050919050565b600060208201905081810360008301526114dc816112d6565b9050919050565b600060208201905081810360008301526114fc816112f9565b9050919050565b6000602082019050818103600083015261151c8161131c565b9050919050565b600060c082019050611538600083018a61133f565b61154560208301896111db565b61155260408301886111db565b61155f60608301876111db565b61156c60808301866111cc565b81810360a083015261157f8184866111ea565b905098975050505050505050565b600080833560016020038436030381126115a657600080fd5b80840192508235915067ffffffffffffffff8211156115c457600080fd5b6020830192506001820236038313156115dc57600080fd5b509250929050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000611627826116a0565b9150611632836116a0565b92508282101561164557611644611722565b5b828203905092915050565b600061165b82611680565b9050919050565b600061166d82611680565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006116b5826116bc565b9050919050565b60006116c7826116ce565b9050919050565b60006116d982611680565b9050919050565b82818337600083830152505050565b60005b8381101561170d5780820151818401526020810190506116f2565b8381111561171c576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b7f53574150204641494c4544000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b61188781611650565b811461189257600080fd5b50565b61189e81611662565b81146118a957600080fd5b50565b6118b581611674565b81146118c057600080fd5b50565b6118cc816116a0565b81146118d757600080fd5b5056fea2646970667358221220b56b2eb2d30b8a2a6b1d4c8497f1b89a3596e087faca66987d6f30f119481f2364736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_anyswapRouterAddress": "Address of the default bridge"
        }
      },
      "initTokensCross(uint256,(address,address,address,bytes),(address,address,address,bytes),(address,address,uint256,bytes))": {
        "details": "This function is executed on the origin chain"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "finalizeTokenCross((address,address,address,bytes),uint256,address)": {
        "notice": "Finalize the process of swidging"
      },
      "initTokensCross(uint256,(address,address,address,bytes),(address,address,address,bytes),(address,address,uint256,bytes))": {
        "notice": "Init the process of swidging"
      },
      "retrieve(address,uint256)": {
        "notice": "To retrieve any tokens that got stuck on the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Router.sol:Router",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 389,
        "contract": "contracts/Router.sol:Router",
        "label": "bridgeProviders",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint8,t_contract(IBridge)775)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IBridge)775": {
        "encoding": "inplace",
        "label": "contract IBridge",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint8,t_contract(IBridge)775)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => contract IBridge)",
        "numberOfBytes": "32",
        "value": "t_contract(IBridge)775"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}