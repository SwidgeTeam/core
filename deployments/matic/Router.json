{
  "address": "0x474587fa0346F0971162b36a0346584Ff745B9c6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_anyswapRouterAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toChainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dstTokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dstTokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "CrossInitiated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dstCrossToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dstToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_crossAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toChainId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_dstDEX",
          "type": "uint8"
        }
      ],
      "name": "finalizeTokenCross",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_srcAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "callAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Router.SwapData",
          "name": "_srcSwapData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "callAddress",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Router.SwapData",
          "name": "_dstSwapData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiverAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "toChainId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Router.BridgeData",
          "name": "_bridgeData",
          "type": "tuple"
        }
      ],
      "name": "initTokensCross",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "retrieve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5d3c7e8778c814bb7b572f5f09d8db8c0932fa2ca39e5359290f4607d71de0e0",
  "receipt": {
    "to": null,
    "from": "0x335e2912D888F76326e806C666B690Df2D886D07",
    "contractAddress": "0x474587fa0346F0971162b36a0346584Ff745B9c6",
    "transactionIndex": 48,
    "gasUsed": "1101727",
    "logsBloom": "0x
    "blockHash": "0xedaa8b0ff5fb8a2f313bac5fb273b76387f70bf2e56be729d36589b0380d554e",
    "transactionHash": "0x5d3c7e8778c814bb7b572f5f09d8db8c0932fa2ca39e5359290f4607d71de0e0",
    "logs": [
      {
        "transactionIndex": 48,
        "blockNumber": 27004798,
        "transactionHash": "0x5d3c7e8778c814bb7b572f5f09d8db8c0932fa2ca39e5359290f4607d71de0e0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000335e2912d888f76326e806c666b690df2d886d07",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000a4649faaeeddc700000000000000000000000000000000000000000000000027d73b7f59062b280000000000000000000000000000000000000000000001ed09fa1b5a1dfe09430000000000000000000000000000000000000000000000002732d6dfae174d610000000000000000000000000000000000000000000001ed0a9e7ff9c8ece70a",
        "logIndex": 153,
        "blockHash": "0xedaa8b0ff5fb8a2f313bac5fb273b76387f70bf2e56be729d36589b0380d554e"
      }
    ],
    "blockNumber": 27004798,
    "cumulativeGasUsed": "7788247",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa6318769cEfcAd7454c69bb47D864375ac286e89"
  ],
  "numDeployments": 1,
  "solcInputHash": "fdf3e66e17286719528854b57f7ca9f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_anyswapRouterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstTokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstTokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"CrossInitiated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dstCrossToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_crossAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_dstDEX\",\"type\":\"uint8\"}],\"name\":\"finalizeTokenCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_srcAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"callAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Router.SwapData\",\"name\":\"_srcSwapData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"callAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Router.SwapData\",\"name\":\"_dstSwapData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Router.BridgeData\",\"name\":\"_bridgeData\",\"type\":\"tuple\"}],\"name\":\"initTokensCross\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"retrieve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_anyswapRouterAddress\":\"Address of the default bridge\"}},\"initTokensCross(uint256,(address,address,address,bytes),(address,address,address,bytes),(address,address,uint256,bytes))\":{\"details\":\"This function is executed on the origin chain\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"finalizeTokenCross(address,address,address,uint256,uint256,uint8)\":{\"notice\":\"Finalize the process of swidging\"},\"initTokensCross(uint256,(address,address,address,bytes),(address,address,address,bytes),(address,address,uint256,bytes))\":{\"notice\":\"Init the process of swidging\"},\"retrieve(address,uint256)\":{\"notice\":\"To retrieve any tokens that got stuck on the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Router.sol\":\"Router\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Router.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"./dexs/IDEX.sol\\\";\\nimport \\\"./bridge/IBridge.sol\\\";\\n\\ncontract Router {\\n    mapping(uint8 => IBridge) private bridgeProviders;\\n\\n    enum bridgeCode {\\n        Anyswap // 0\\n    }\\n\\n    /// @param _anyswapRouterAddress Address of the default bridge\\n    constructor(address _anyswapRouterAddress) {\\n        bridgeProviders[uint8(bridgeCode.Anyswap)] = IBridge(_anyswapRouterAddress);\\n    }\\n\\n    struct SwapData {\\n        address tokenIn;\\n        address tokenOut;\\n        address payable callAddress;\\n        bytes callData;\\n    }\\n\\n    struct BridgeData {\\n        address tokenIn;\\n        address receiverAddress;\\n        uint256 toChainId;\\n        bytes data;\\n    }\\n\\n    event CrossInitiated(\\n        uint256 amount,\\n        uint256 indexed toChainId,\\n        address indexed router,\\n        address dstTokenIn,\\n        address dstTokenOut,\\n        address maker,\\n        bytes data\\n    );\\n\\n    /// Init the process of swidging\\n    /// @dev This function is executed on the origin chain\\n    function initTokensCross(\\n        uint256 _srcAmount,\\n        SwapData calldata _srcSwapData,\\n        SwapData calldata _dstSwapData,\\n        BridgeData calldata _bridgeData\\n    ) external payable {\\n        // Take ownership of user's tokens\\n        TransferHelper.safeTransferFrom(\\n            _srcSwapData.tokenIn,\\n            msg.sender,\\n            address(this),\\n            _srcAmount\\n        );\\n\\n        // Approve to ZeroEx\\n        TransferHelper.safeApprove(\\n            _srcSwapData.tokenIn,\\n            _srcSwapData.callAddress,\\n            _srcAmount\\n        );\\n\\n        // Execute swap with ZeroEx and compute final `boughtAmount`\\n        uint256 boughtAmount = IERC20(_srcSwapData.tokenOut).balanceOf(address(this));\\n        (bool success,) = _srcSwapData.callAddress.call{value : msg.value}(_srcSwapData.callData);\\n        require(success, \\\"SWAP FAILED\\\");\\n        boughtAmount = IERC20(_srcSwapData.tokenOut).balanceOf(address(this)) - boughtAmount;\\n\\n        // Load selected bridge provider\\n        IBridge bridge = bridgeProviders[uint8(bridgeCode.Anyswap)];\\n\\n        // Approve tokens for the bridge to take\\n        TransferHelper.safeApprove(\\n            _bridgeData.tokenIn,\\n            address(bridge),\\n            boughtAmount\\n        );\\n\\n        // Execute bridge process\\n        bridge.send(\\n            _bridgeData.tokenIn,\\n            address(this),\\n            _bridgeData.receiverAddress,\\n            boughtAmount,\\n            _bridgeData.toChainId,\\n            _bridgeData.data\\n        );\\n\\n        // Refund any unspent protocol fees to the sender.\\n        payable(msg.sender).transfer(address(this).balance);\\n\\n        // Emit event for relayer\\n        emit CrossInitiated(\\n            boughtAmount,\\n            _bridgeData.toChainId,\\n            _bridgeData.receiverAddress,\\n            _dstSwapData.tokenIn,\\n            _dstSwapData.tokenOut,\\n            _dstSwapData.callAddress,\\n            _dstSwapData.callData\\n        );\\n    }\\n\\n    /// Finalize the process of swidging\\n    function finalizeTokenCross(address _dstCrossToken, address _dstToken, address _to, uint256 _crossAmount, uint256 _toChainId, uint8 _dstDEX) external {\\n\\n    }\\n\\n    /// To retrieve any tokens that got stuck on the contract\\n    function retrieve(address _token, uint256 _amount) external {\\n        TransferHelper.safeTransfer(_token, msg.sender, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x44552cb0bdf72c06f1002ada1d58bf3ba8e4299907f3e80c83a3898809d8ef39\",\"license\":\"MIT\"},\"contracts/bridge/IBridge.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\n\\nabstract contract IBridge is Ownable {\\n    address private router;\\n\\n    modifier onlyRouter() {\\n        require(msg.sender == router, \\\"Unauthorized caller\\\");\\n        _;\\n    }\\n\\n    event UpdatedRouter(address indexed routerAddress);\\n\\n    function updateRouter(address routerAddress) external onlyOwner {\\n        router = routerAddress;\\n        emit UpdatedRouter(routerAddress);\\n    }\\n\\n    function retrieve(address _token, uint256 _amount) external onlyOwner {\\n        TransferHelper.safeTransfer(_token, msg.sender, _amount);\\n    }\\n\\n    function send(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _toChainId,\\n        bytes calldata _data\\n    ) external virtual;\\n}\\n\",\"keccak256\":\"0xcb4e6029d02bbb86df23944424c30648218b657e20c95225fab1c0cff6d2b6c3\",\"license\":\"MIT\"},\"contracts/dexs/IDEX.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IDEX {\\n\\n    function custodianAddress() external view returns (address);\\n\\n    function swap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _from,\\n        address _to,\\n        uint256 _amountIn,\\n        bytes calldata _data\\n    ) external returns (uint256 amountOut);\\n\\n}\\n\\n\",\"keccak256\":\"0x06626777c519b05b3c42d479b547db1ff05f0fac2680df43eda38f7b4ac2c53e\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620013f9380380620013f98339818101604052810190620000379190620000e5565b8060008080600081111562000075577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60ff1660ff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015f565b600081519050620000df8162000145565b92915050565b600060208284031215620000f857600080fd5b60006200010884828501620000ce565b91505092915050565b60006200011e8262000125565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620001508162000111565b81146200015c57600080fd5b50565b61128a806200016f6000396000f3fe6080604052600436106100345760003560e01c8063b07dc49b14610039578063c3a2a66514610055578063ec52d2341461007e575b600080fd5b610053600480360381019061004e9190610b83565b6100a7565b005b34801561006157600080fd5b5061007c60048036038101906100779190610af5565b61054d565b005b34801561008a57600080fd5b506100a560048036038101906100a09190610a6c565b61055c565b005b6100c58360000160208101906100bd9190610a1a565b333087610564565b6100f48360000160208101906100db9190610a1a565b8460400160208101906100ee9190610a43565b866106bc565b60008360200160208101906101099190610a1a565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016101419190610d9a565b60206040518083038186803b15801561015957600080fd5b505afa15801561016d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101919190610b5a565b905060008460400160208101906101a89190610a43565b73ffffffffffffffffffffffffffffffffffffffff16348680606001906101cf9190610f5b565b6040516101dd929190610d6a565b60006040518083038185875af1925050503d806000811461021a576040519150601f19603f3d011682016040523d82523d6000602084013e61021f565b606091505b5050905080610263576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025a90610e9f565b60405180910390fd5b818560200160208101906102779190610a1a565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102af9190610d9a565b60206040518083038186803b1580156102c757600080fd5b505afa1580156102db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ff9190610b5a565b6103099190610fea565b91506000806000806000811115610349577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061039d8460000160208101906103969190610a1a565b82856106bc565b8073ffffffffffffffffffffffffffffffffffffffff1663da1c7e8c8560000160208101906103cc9190610a1a565b308760200160208101906103e09190610a1a565b8789604001358a80606001906103f69190610f5b565b6040518863ffffffff1660e01b81526004016104189796959493929190610db5565b600060405180830381600087803b15801561043257600080fd5b505af1158015610446573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610490573d6000803e3d6000fd5b508360200160208101906104a49190610a1a565b73ffffffffffffffffffffffffffffffffffffffff1684604001357f0b737671bd385ef5037921d101c15434519b4c49d42afb9861cbbf022944e2fe858860000160208101906104f49190610a1a565b8960200160208101906105079190610a1a565b8a604001602081019061051a9190610a43565b8b806060019061052a9190610f5b565b60405161053c96959493929190610eff565b60405180910390a350505050505050565b610558823383610811565b5050565b505050505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b86868660405160240161059b93929190610e1f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516106059190610d83565b6000604051808303816000865af19150503d8060008114610642576040519150601f19603f3d011682016040523d82523d6000602084013e610647565b606091505b509150915081801561067557506000815114806106745750808060200190518101906106739190610b31565b5b5b6106b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ab90610edf565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b85856040516024016106f1929190610e56565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161075b9190610d83565b6000604051808303816000865af19150503d8060008114610798576040519150601f19603f3d011682016040523d82523d6000602084013e61079d565b606091505b50915091508180156107cb57506000815114806107ca5750808060200190518101906107c99190610b31565b5b5b61080a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080190610e7f565b60405180910390fd5b5050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8585604051602401610846929190610e56565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516108b09190610d83565b6000604051808303816000865af19150503d80600081146108ed576040519150601f19603f3d011682016040523d82523d6000602084013e6108f2565b606091505b5091509150818015610920575060008151148061091f57508080602001905181019061091e9190610b31565b5b5b61095f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095690610ebf565b60405180910390fd5b5050505050565b600081359050610975816111e1565b92915050565b60008135905061098a816111f8565b92915050565b60008151905061099f8161120f565b92915050565b6000608082840312156109b757600080fd5b81905092915050565b6000608082840312156109d257600080fd5b81905092915050565b6000813590506109ea81611226565b92915050565b6000815190506109ff81611226565b92915050565b600081359050610a148161123d565b92915050565b600060208284031215610a2c57600080fd5b6000610a3a84828501610966565b91505092915050565b600060208284031215610a5557600080fd5b6000610a638482850161097b565b91505092915050565b60008060008060008060c08789031215610a8557600080fd5b6000610a9389828a01610966565b9650506020610aa489828a01610966565b9550506040610ab589828a01610966565b9450506060610ac689828a016109db565b9350506080610ad789828a016109db565b92505060a0610ae889828a01610a05565b9150509295509295509295565b60008060408385031215610b0857600080fd5b6000610b1685828601610966565b9250506020610b27858286016109db565b9150509250929050565b600060208284031215610b4357600080fd5b6000610b5184828501610990565b91505092915050565b600060208284031215610b6c57600080fd5b6000610b7a848285016109f0565b91505092915050565b60008060008060808587031215610b9957600080fd5b6000610ba7878288016109db565b945050602085013567ffffffffffffffff811115610bc457600080fd5b610bd0878288016109c0565b935050604085013567ffffffffffffffff811115610bed57600080fd5b610bf9878288016109c0565b925050606085013567ffffffffffffffff811115610c1657600080fd5b610c22878288016109a5565b91505092959194509250565b610c3781611085565b82525050565b610c468161101e565b82525050565b6000610c588385610fbd565b9350610c658385846110bb565b610c6e8361112c565b840190509392505050565b6000610c858385610fce565b9350610c928385846110bb565b82840190509392505050565b6000610ca982610fb2565b610cb38185610fce565b9350610cc38185602086016110ca565b80840191505092915050565b6000610cdc600283610fd9565b9150610ce78261113d565b602082019050919050565b6000610cff600b83610fd9565b9150610d0a82611166565b602082019050919050565b6000610d22600283610fd9565b9150610d2d8261118f565b602082019050919050565b6000610d45600383610fd9565b9150610d50826111b8565b602082019050919050565b610d648161106e565b82525050565b6000610d77828486610c79565b91508190509392505050565b6000610d8f8284610c9e565b915081905092915050565b6000602082019050610daf6000830184610c3d565b92915050565b600060c082019050610dca600083018a610c3d565b610dd76020830189610c3d565b610de46040830188610c3d565b610df16060830187610d5b565b610dfe6080830186610d5b565b81810360a0830152610e11818486610c4c565b905098975050505050505050565b6000606082019050610e346000830186610c3d565b610e416020830185610c3d565b610e4e6040830184610d5b565b949350505050565b6000604082019050610e6b6000830185610c3d565b610e786020830184610d5b565b9392505050565b60006020820190508181036000830152610e9881610ccf565b9050919050565b60006020820190508181036000830152610eb881610cf2565b9050919050565b60006020820190508181036000830152610ed881610d15565b9050919050565b60006020820190508181036000830152610ef881610d38565b9050919050565b600060a082019050610f146000830189610d5b565b610f216020830188610c3d565b610f2e6040830187610c3d565b610f3b6060830186610c2e565b8181036080830152610f4e818486610c4c565b9050979650505050505050565b60008083356001602003843603038112610f7457600080fd5b80840192508235915067ffffffffffffffff821115610f9257600080fd5b602083019250600182023603831315610faa57600080fd5b509250929050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000610ff58261106e565b91506110008361106e565b925082821015611013576110126110fd565b5b828203905092915050565b60006110298261104e565b9050919050565b600061103b8261104e565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061109082611097565b9050919050565b60006110a2826110a9565b9050919050565b60006110b48261104e565b9050919050565b82818337600083830152505050565b60005b838110156110e85780820151818401526020810190506110cd565b838111156110f7576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b7f53574150204641494c4544000000000000000000000000000000000000000000600082015250565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b6111ea8161101e565b81146111f557600080fd5b50565b61120181611030565b811461120c57600080fd5b50565b61121881611042565b811461122357600080fd5b50565b61122f8161106e565b811461123a57600080fd5b50565b61124681611078565b811461125157600080fd5b5056fea264697066735822122037994d141d77d15b3c60c44f067bcd36b8d70909c349dbb9a94441f4e49f89aa64736f6c63430008010033",
  "deployedBytecode": "0x6080604052600436106100345760003560e01c8063b07dc49b14610039578063c3a2a66514610055578063ec52d2341461007e575b600080fd5b610053600480360381019061004e9190610b83565b6100a7565b005b34801561006157600080fd5b5061007c60048036038101906100779190610af5565b61054d565b005b34801561008a57600080fd5b506100a560048036038101906100a09190610a6c565b61055c565b005b6100c58360000160208101906100bd9190610a1a565b333087610564565b6100f48360000160208101906100db9190610a1a565b8460400160208101906100ee9190610a43565b866106bc565b60008360200160208101906101099190610a1a565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016101419190610d9a565b60206040518083038186803b15801561015957600080fd5b505afa15801561016d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101919190610b5a565b905060008460400160208101906101a89190610a43565b73ffffffffffffffffffffffffffffffffffffffff16348680606001906101cf9190610f5b565b6040516101dd929190610d6a565b60006040518083038185875af1925050503d806000811461021a576040519150601f19603f3d011682016040523d82523d6000602084013e61021f565b606091505b5050905080610263576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025a90610e9f565b60405180910390fd5b818560200160208101906102779190610a1a565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102af9190610d9a565b60206040518083038186803b1580156102c757600080fd5b505afa1580156102db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ff9190610b5a565b6103099190610fea565b91506000806000806000811115610349577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60ff1660ff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905061039d8460000160208101906103969190610a1a565b82856106bc565b8073ffffffffffffffffffffffffffffffffffffffff1663da1c7e8c8560000160208101906103cc9190610a1a565b308760200160208101906103e09190610a1a565b8789604001358a80606001906103f69190610f5b565b6040518863ffffffff1660e01b81526004016104189796959493929190610db5565b600060405180830381600087803b15801561043257600080fd5b505af1158015610446573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610490573d6000803e3d6000fd5b508360200160208101906104a49190610a1a565b73ffffffffffffffffffffffffffffffffffffffff1684604001357f0b737671bd385ef5037921d101c15434519b4c49d42afb9861cbbf022944e2fe858860000160208101906104f49190610a1a565b8960200160208101906105079190610a1a565b8a604001602081019061051a9190610a43565b8b806060019061052a9190610f5b565b60405161053c96959493929190610eff565b60405180910390a350505050505050565b610558823383610811565b5050565b505050505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b86868660405160240161059b93929190610e1f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516106059190610d83565b6000604051808303816000865af19150503d8060008114610642576040519150601f19603f3d011682016040523d82523d6000602084013e610647565b606091505b509150915081801561067557506000815114806106745750808060200190518101906106739190610b31565b5b5b6106b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ab90610edf565b60405180910390fd5b505050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b85856040516024016106f1929190610e56565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161075b9190610d83565b6000604051808303816000865af19150503d8060008114610798576040519150601f19603f3d011682016040523d82523d6000602084013e61079d565b606091505b50915091508180156107cb57506000815114806107ca5750808060200190518101906107c99190610b31565b5b5b61080a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080190610e7f565b60405180910390fd5b5050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8585604051602401610846929190610e56565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516108b09190610d83565b6000604051808303816000865af19150503d80600081146108ed576040519150601f19603f3d011682016040523d82523d6000602084013e6108f2565b606091505b5091509150818015610920575060008151148061091f57508080602001905181019061091e9190610b31565b5b5b61095f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095690610ebf565b60405180910390fd5b5050505050565b600081359050610975816111e1565b92915050565b60008135905061098a816111f8565b92915050565b60008151905061099f8161120f565b92915050565b6000608082840312156109b757600080fd5b81905092915050565b6000608082840312156109d257600080fd5b81905092915050565b6000813590506109ea81611226565b92915050565b6000815190506109ff81611226565b92915050565b600081359050610a148161123d565b92915050565b600060208284031215610a2c57600080fd5b6000610a3a84828501610966565b91505092915050565b600060208284031215610a5557600080fd5b6000610a638482850161097b565b91505092915050565b60008060008060008060c08789031215610a8557600080fd5b6000610a9389828a01610966565b9650506020610aa489828a01610966565b9550506040610ab589828a01610966565b9450506060610ac689828a016109db565b9350506080610ad789828a016109db565b92505060a0610ae889828a01610a05565b9150509295509295509295565b60008060408385031215610b0857600080fd5b6000610b1685828601610966565b9250506020610b27858286016109db565b9150509250929050565b600060208284031215610b4357600080fd5b6000610b5184828501610990565b91505092915050565b600060208284031215610b6c57600080fd5b6000610b7a848285016109f0565b91505092915050565b60008060008060808587031215610b9957600080fd5b6000610ba7878288016109db565b945050602085013567ffffffffffffffff811115610bc457600080fd5b610bd0878288016109c0565b935050604085013567ffffffffffffffff811115610bed57600080fd5b610bf9878288016109c0565b925050606085013567ffffffffffffffff811115610c1657600080fd5b610c22878288016109a5565b91505092959194509250565b610c3781611085565b82525050565b610c468161101e565b82525050565b6000610c588385610fbd565b9350610c658385846110bb565b610c6e8361112c565b840190509392505050565b6000610c858385610fce565b9350610c928385846110bb565b82840190509392505050565b6000610ca982610fb2565b610cb38185610fce565b9350610cc38185602086016110ca565b80840191505092915050565b6000610cdc600283610fd9565b9150610ce78261113d565b602082019050919050565b6000610cff600b83610fd9565b9150610d0a82611166565b602082019050919050565b6000610d22600283610fd9565b9150610d2d8261118f565b602082019050919050565b6000610d45600383610fd9565b9150610d50826111b8565b602082019050919050565b610d648161106e565b82525050565b6000610d77828486610c79565b91508190509392505050565b6000610d8f8284610c9e565b915081905092915050565b6000602082019050610daf6000830184610c3d565b92915050565b600060c082019050610dca600083018a610c3d565b610dd76020830189610c3d565b610de46040830188610c3d565b610df16060830187610d5b565b610dfe6080830186610d5b565b81810360a0830152610e11818486610c4c565b905098975050505050505050565b6000606082019050610e346000830186610c3d565b610e416020830185610c3d565b610e4e6040830184610d5b565b949350505050565b6000604082019050610e6b6000830185610c3d565b610e786020830184610d5b565b9392505050565b60006020820190508181036000830152610e9881610ccf565b9050919050565b60006020820190508181036000830152610eb881610cf2565b9050919050565b60006020820190508181036000830152610ed881610d15565b9050919050565b60006020820190508181036000830152610ef881610d38565b9050919050565b600060a082019050610f146000830189610d5b565b610f216020830188610c3d565b610f2e6040830187610c3d565b610f3b6060830186610c2e565b8181036080830152610f4e818486610c4c565b9050979650505050505050565b60008083356001602003843603038112610f7457600080fd5b80840192508235915067ffffffffffffffff821115610f9257600080fd5b602083019250600182023603831315610faa57600080fd5b509250929050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000610ff58261106e565b91506110008361106e565b925082821015611013576110126110fd565b5b828203905092915050565b60006110298261104e565b9050919050565b600061103b8261104e565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061109082611097565b9050919050565b60006110a2826110a9565b9050919050565b60006110b48261104e565b9050919050565b82818337600083830152505050565b60005b838110156110e85780820151818401526020810190506110cd565b838111156110f7576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f5341000000000000000000000000000000000000000000000000000000000000600082015250565b7f53574150204641494c4544000000000000000000000000000000000000000000600082015250565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b6111ea8161101e565b81146111f557600080fd5b50565b61120181611030565b811461120c57600080fd5b50565b61121881611042565b811461122357600080fd5b50565b61122f8161106e565b811461123a57600080fd5b50565b61124681611078565b811461125157600080fd5b5056fea264697066735822122037994d141d77d15b3c60c44f067bcd36b8d70909c349dbb9a94441f4e49f89aa64736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_anyswapRouterAddress": "Address of the default bridge"
        }
      },
      "initTokensCross(uint256,(address,address,address,bytes),(address,address,address,bytes),(address,address,uint256,bytes))": {
        "details": "This function is executed on the origin chain"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "finalizeTokenCross(address,address,address,uint256,uint256,uint8)": {
        "notice": "Finalize the process of swidging"
      },
      "initTokensCross(uint256,(address,address,address,bytes),(address,address,address,bytes),(address,address,uint256,bytes))": {
        "notice": "Init the process of swidging"
      },
      "retrieve(address,uint256)": {
        "notice": "To retrieve any tokens that got stuck on the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 500,
        "contract": "contracts/Router.sol:Router",
        "label": "bridgeProviders",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint8,t_contract(IBridge)916)"
      }
    ],
    "types": {
      "t_contract(IBridge)916": {
        "encoding": "inplace",
        "label": "contract IBridge",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint8,t_contract(IBridge)916)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => contract IBridge)",
        "numberOfBytes": "32",
        "value": "t_contract(IBridge)916"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}